/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const GAP_SCAN_HEADER_ADV_IND: u32 = 0;
pub const GAP_SCAN_HEADER_ADV_DIRECT_IND: u32 = 1;
pub const GAP_SCAN_HEADER_ADV_NONCONN_IND: u32 = 2;
pub const GAP_SCAN_HEADER_SCAN_REQ: u32 = 3;
pub const GAP_SCAN_HEADER_SCAN_RSP: u32 = 4;
pub const GAP_SCAN_HEADER_CONNECT_REQ: u32 = 5;
pub const GAP_SCAN_HEADER_ADV_DISCOVER_IND: u32 = 6;
pub const GAP_AD_FLAG_LIMITED_DISCOVERABLE: u32 = 1;
pub const GAP_AD_FLAG_GENERAL_DISCOVERABLE: u32 = 2;
pub const GAP_AD_FLAG_BREDR_NOT_SUPPORTED: u32 = 4;
pub const GAP_AD_FLAG_SIMULTANEOUS_LEBREDR_CTRL: u32 = 16;
pub const GAP_AD_FLAG_SIMULTANEOUS_LEBREDR_HOST: u32 = 32;
pub const GAP_AD_FLAG_MASK: u32 = 31;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type uint8 = ::std::os::raw::c_uchar;
pub type uint16 = ::std::os::raw::c_ushort;
pub type int16 = ::std::os::raw::c_short;
pub type uint32 = ::std::os::raw::c_ulong;
pub type int8 = ::std::os::raw::c_schar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bd_addr_t {
    pub addr: [uint8; 6usize],
}
#[test]
fn bindgen_test_layout_bd_addr_t() {
    const UNINIT: ::std::mem::MaybeUninit<bd_addr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bd_addr_t>(),
        6usize,
        concat!("Size of: ", stringify!(bd_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bd_addr_t>(),
        1usize,
        concat!("Alignment of ", stringify!(bd_addr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bd_addr_t),
            "::",
            stringify!(addr)
        )
    );
}
pub type bd_addr = bd_addr_t;
pub type hwaddr = bd_addr;
#[repr(C)]
#[derive(Debug)]
pub struct uint8array {
    pub len: uint8,
    pub data: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_uint8array() {
    const UNINIT: ::std::mem::MaybeUninit<uint8array> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint8array>(),
        1usize,
        concat!("Size of: ", stringify!(uint8array))
    );
    assert_eq!(
        ::std::mem::align_of::<uint8array>(),
        1usize,
        concat!("Alignment of ", stringify!(uint8array))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uint8array),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(uint8array),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct string {
    pub len: uint8,
    pub data: __IncompleteArrayField<int8>,
}
#[test]
fn bindgen_test_layout_string() {
    const UNINIT: ::std::mem::MaybeUninit<string> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<string>(),
        1usize,
        concat!("Size of: ", stringify!(string))
    );
    assert_eq!(
        ::std::mem::align_of::<string>(),
        1usize,
        concat!("Alignment of ", stringify!(string))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(string),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(string),
            "::",
            stringify!(data)
        )
    );
}
pub type ble_cmd_handler =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_header {
    pub type_hilen: uint8,
    pub lolen: uint8,
    pub cls: uint8,
    pub command: uint8,
}
#[test]
fn bindgen_test_layout_ble_header() {
    const UNINIT: ::std::mem::MaybeUninit<ble_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_header>(),
        4usize,
        concat!("Size of: ", stringify!(ble_header))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_header>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_hilen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_header),
            "::",
            stringify!(type_hilen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lolen) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_header),
            "::",
            stringify!(lolen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cls) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_header),
            "::",
            stringify!(cls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_header),
            "::",
            stringify!(command)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg {
    pub hdr: ble_header,
    pub params: ::std::os::raw::c_long,
    pub handler: ble_cmd_handler,
}
#[test]
fn bindgen_test_layout_ble_msg() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg>(),
        24usize,
        concat!("Size of: ", stringify!(ble_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_msg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg),
            "::",
            stringify!(handler)
        )
    );
}
extern "C" {
    pub fn ble_find_msg_hdr(hdr: ble_header) -> *const ble_msg;
}
extern "C" {
    pub fn ble_find_msg_hdr_r(hdr: ble_header) -> *const ble_msg;
}
extern "C" {
    pub fn ble_get_msg(idx: uint16) -> *const ble_msg;
}
extern "C" {
    pub fn ble_get_msg_hdr(hdr: ble_header) -> *const ble_msg;
}
extern "C" {
    pub static mut bglib_output: ::std::option::Option<
        unsafe extern "C" fn(len1: uint8, data1: *mut uint8, len2: uint16, data2: *mut uint8),
    >;
}
extern "C" {
    pub fn ble_send_message(msgid: uint16, ...);
}
pub const system_endpoints_system_endpoint_api: system_endpoints = 0;
pub const system_endpoints_system_endpoint_test: system_endpoints = 1;
pub const system_endpoints_system_endpoint_script: system_endpoints = 2;
pub const system_endpoints_system_endpoint_usb: system_endpoints = 3;
pub const system_endpoints_system_endpoint_uart0: system_endpoints = 4;
pub const system_endpoints_system_endpoint_uart1: system_endpoints = 5;
pub const system_endpoints_system_endpoints_max: system_endpoints = 6;
pub type system_endpoints = ::std::os::raw::c_uint;
pub const attributes_attribute_change_reason_attributes_attribute_change_reason_write_request:
    attributes_attribute_change_reason = 0;
pub const attributes_attribute_change_reason_attributes_attribute_change_reason_write_command:
    attributes_attribute_change_reason = 1;
pub const attributes_attribute_change_reason_attributes_attribute_change_reason_write_request_user : attributes_attribute_change_reason = 2 ;
pub const attributes_attribute_change_reason_attributes_attribute_change_reason_max:
    attributes_attribute_change_reason = 3;
pub type attributes_attribute_change_reason = ::std::os::raw::c_uint;
pub const attributes_attribute_status_flag_attributes_attribute_status_flag_notify:
    attributes_attribute_status_flag = 1;
pub const attributes_attribute_status_flag_attributes_attribute_status_flag_indicate:
    attributes_attribute_status_flag = 2;
pub const attributes_attribute_status_flag_attributes_attribute_status_flag_max:
    attributes_attribute_status_flag = 3;
pub type attributes_attribute_status_flag = ::std::os::raw::c_uint;
pub const connection_connstatus_connection_connected: connection_connstatus = 1;
pub const connection_connstatus_connection_encrypted: connection_connstatus = 2;
pub const connection_connstatus_connection_completed: connection_connstatus = 4;
pub const connection_connstatus_connection_parameters_change: connection_connstatus = 8;
pub const connection_connstatus_connection_connstatus_max: connection_connstatus = 9;
pub type connection_connstatus = ::std::os::raw::c_uint;
pub const attclient_attribute_value_types_attclient_attribute_value_type_read:
    attclient_attribute_value_types = 0;
pub const attclient_attribute_value_types_attclient_attribute_value_type_notify:
    attclient_attribute_value_types = 1;
pub const attclient_attribute_value_types_attclient_attribute_value_type_indicate:
    attclient_attribute_value_types = 2;
pub const attclient_attribute_value_types_attclient_attribute_value_type_read_by_type:
    attclient_attribute_value_types = 3;
pub const attclient_attribute_value_types_attclient_attribute_value_type_read_blob:
    attclient_attribute_value_types = 4;
pub const attclient_attribute_value_types_attclient_attribute_value_type_indicate_rsp_req:
    attclient_attribute_value_types = 5;
pub const attclient_attribute_value_types_attclient_attribute_value_types_max:
    attclient_attribute_value_types = 6;
pub type attclient_attribute_value_types = ::std::os::raw::c_uint;
pub const sm_bonding_key_sm_bonding_key_ltk: sm_bonding_key = 1;
pub const sm_bonding_key_sm_bonding_key_addr_public: sm_bonding_key = 2;
pub const sm_bonding_key_sm_bonding_key_addr_static: sm_bonding_key = 4;
pub const sm_bonding_key_sm_bonding_key_irk: sm_bonding_key = 8;
pub const sm_bonding_key_sm_bonding_key_edivrand: sm_bonding_key = 16;
pub const sm_bonding_key_sm_bonding_key_csrk: sm_bonding_key = 32;
pub const sm_bonding_key_sm_bonding_key_masterid: sm_bonding_key = 64;
pub const sm_bonding_key_sm_bonding_key_max: sm_bonding_key = 65;
pub type sm_bonding_key = ::std::os::raw::c_uint;
pub const sm_io_capability_sm_io_capability_displayonly: sm_io_capability = 0;
pub const sm_io_capability_sm_io_capability_displayyesno: sm_io_capability = 1;
pub const sm_io_capability_sm_io_capability_keyboardonly: sm_io_capability = 2;
pub const sm_io_capability_sm_io_capability_noinputnooutput: sm_io_capability = 3;
pub const sm_io_capability_sm_io_capability_keyboarddisplay: sm_io_capability = 4;
pub const sm_io_capability_sm_io_capability_max: sm_io_capability = 5;
pub type sm_io_capability = ::std::os::raw::c_uint;
pub const gap_address_type_gap_address_type_public: gap_address_type = 0;
pub const gap_address_type_gap_address_type_random: gap_address_type = 1;
pub const gap_address_type_gap_address_type_max: gap_address_type = 2;
pub type gap_address_type = ::std::os::raw::c_uint;
pub const gap_discoverable_mode_gap_non_discoverable: gap_discoverable_mode = 0;
pub const gap_discoverable_mode_gap_limited_discoverable: gap_discoverable_mode = 1;
pub const gap_discoverable_mode_gap_general_discoverable: gap_discoverable_mode = 2;
pub const gap_discoverable_mode_gap_broadcast: gap_discoverable_mode = 3;
pub const gap_discoverable_mode_gap_user_data: gap_discoverable_mode = 4;
pub const gap_discoverable_mode_gap_discoverable_mode_max: gap_discoverable_mode = 5;
pub type gap_discoverable_mode = ::std::os::raw::c_uint;
pub const gap_connectable_mode_gap_non_connectable: gap_connectable_mode = 0;
pub const gap_connectable_mode_gap_directed_connectable: gap_connectable_mode = 1;
pub const gap_connectable_mode_gap_undirected_connectable: gap_connectable_mode = 2;
pub const gap_connectable_mode_gap_scannable_non_connectable: gap_connectable_mode = 3;
pub const gap_connectable_mode_gap_connectable_mode_max: gap_connectable_mode = 4;
pub type gap_connectable_mode = ::std::os::raw::c_uint;
pub const gap_discover_mode_gap_discover_limited: gap_discover_mode = 0;
pub const gap_discover_mode_gap_discover_generic: gap_discover_mode = 1;
pub const gap_discover_mode_gap_discover_observation: gap_discover_mode = 2;
pub const gap_discover_mode_gap_discover_mode_max: gap_discover_mode = 3;
pub type gap_discover_mode = ::std::os::raw::c_uint;
pub const gap_ad_types_gap_ad_type_none: gap_ad_types = 0;
pub const gap_ad_types_gap_ad_type_flags: gap_ad_types = 1;
pub const gap_ad_types_gap_ad_type_services_16bit_more: gap_ad_types = 2;
pub const gap_ad_types_gap_ad_type_services_16bit_all: gap_ad_types = 3;
pub const gap_ad_types_gap_ad_type_services_32bit_more: gap_ad_types = 4;
pub const gap_ad_types_gap_ad_type_services_32bit_all: gap_ad_types = 5;
pub const gap_ad_types_gap_ad_type_services_128bit_more: gap_ad_types = 6;
pub const gap_ad_types_gap_ad_type_services_128bit_all: gap_ad_types = 7;
pub const gap_ad_types_gap_ad_type_localname_short: gap_ad_types = 8;
pub const gap_ad_types_gap_ad_type_localname_complete: gap_ad_types = 9;
pub const gap_ad_types_gap_ad_type_txpower: gap_ad_types = 10;
pub const gap_ad_types_gap_ad_types_max: gap_ad_types = 11;
pub type gap_ad_types = ::std::os::raw::c_uint;
pub const gap_advertising_policy_gap_adv_policy_all: gap_advertising_policy = 0;
pub const gap_advertising_policy_gap_adv_policy_whitelist_scan: gap_advertising_policy = 1;
pub const gap_advertising_policy_gap_adv_policy_whitelist_connect: gap_advertising_policy = 2;
pub const gap_advertising_policy_gap_adv_policy_whitelist_all: gap_advertising_policy = 3;
pub const gap_advertising_policy_gap_advertising_policy_max: gap_advertising_policy = 4;
pub type gap_advertising_policy = ::std::os::raw::c_uint;
pub const gap_scan_policy_gap_scan_policy_all: gap_scan_policy = 0;
pub const gap_scan_policy_gap_scan_policy_whitelist: gap_scan_policy = 1;
pub const gap_scan_policy_gap_scan_policy_max: gap_scan_policy = 2;
pub type gap_scan_policy = ::std::os::raw::c_uint;
pub const ble_parameter_types_ble_msg_parameter_uint8: ble_parameter_types = 2;
pub const ble_parameter_types_ble_msg_parameter_int8: ble_parameter_types = 3;
pub const ble_parameter_types_ble_msg_parameter_uint16: ble_parameter_types = 4;
pub const ble_parameter_types_ble_msg_parameter_int16: ble_parameter_types = 5;
pub const ble_parameter_types_ble_msg_parameter_uint32: ble_parameter_types = 6;
pub const ble_parameter_types_ble_msg_parameter_int32: ble_parameter_types = 7;
pub const ble_parameter_types_ble_msg_parameter_uint8array: ble_parameter_types = 8;
pub const ble_parameter_types_ble_msg_parameter_string: ble_parameter_types = 9;
pub const ble_parameter_types_ble_msg_parameter_hwaddr: ble_parameter_types = 10;
pub const ble_parameter_types_ble_msg_parameter_uint16array: ble_parameter_types = 11;
pub const ble_parameter_types_ble_msg_parameter_aes_key_128: ble_parameter_types = 12;
pub const ble_parameter_types_ble_msg_parameter_uuid_128: ble_parameter_types = 12;
pub const ble_parameter_types_ble_msg_parameter_sl_bt_uuid_64_t: ble_parameter_types = 13;
pub const ble_parameter_types_ble_msg_parameter_int64_t: ble_parameter_types = 14;
pub const ble_parameter_types_ble_msg_parameter_uint64_t: ble_parameter_types = 15;
pub type ble_parameter_types = ::std::os::raw::c_uint;
pub const ble_msg_types_ble_msg_type_cmd: ble_msg_types = 0;
pub const ble_msg_types_ble_msg_type_rsp: ble_msg_types = 0;
pub const ble_msg_types_ble_msg_type_evt: ble_msg_types = 128;
pub type ble_msg_types = ::std::os::raw::c_uint;
pub const ble_dev_types_ble_dev_type_ble: ble_dev_types = 0;
pub const ble_dev_types_ble_dev_type_wifi: ble_dev_types = 8;
pub const ble_dev_types_ble_dev_type_iwrap: ble_dev_types = 16;
pub const ble_dev_types_ble_dev_type_dumo: ble_dev_types = 32;
pub const ble_dev_types_ble_dev_type_test: ble_dev_types = 32;
pub const ble_dev_types_ble_dev_type_gecko: ble_dev_types = 32;
pub type ble_dev_types = ::std::os::raw::c_uint;
pub const ble_classes_ble_cls_system: ble_classes = 0;
pub const ble_classes_ble_cls_flash: ble_classes = 1;
pub const ble_classes_ble_cls_attributes: ble_classes = 2;
pub const ble_classes_ble_cls_connection: ble_classes = 3;
pub const ble_classes_ble_cls_attclient: ble_classes = 4;
pub const ble_classes_ble_cls_sm: ble_classes = 5;
pub const ble_classes_ble_cls_gap: ble_classes = 6;
pub const ble_classes_ble_cls_hardware: ble_classes = 7;
pub const ble_classes_ble_cls_test: ble_classes = 8;
pub const ble_classes_ble_cls_dfu: ble_classes = 9;
pub const ble_classes_ble_cls_last: ble_classes = 10;
pub type ble_classes = ::std::os::raw::c_uint;
pub const ble_command_ids_ble_cmd_system_reset_id: ble_command_ids = 0;
pub const ble_command_ids_ble_cmd_system_hello_id: ble_command_ids = 1;
pub const ble_command_ids_ble_cmd_system_address_get_id: ble_command_ids = 2;
pub const ble_command_ids_ble_cmd_system_reg_write_id: ble_command_ids = 3;
pub const ble_command_ids_ble_cmd_system_reg_read_id: ble_command_ids = 4;
pub const ble_command_ids_ble_cmd_system_get_counters_id: ble_command_ids = 5;
pub const ble_command_ids_ble_cmd_system_get_connections_id: ble_command_ids = 6;
pub const ble_command_ids_ble_cmd_system_read_memory_id: ble_command_ids = 7;
pub const ble_command_ids_ble_cmd_system_get_info_id: ble_command_ids = 8;
pub const ble_command_ids_ble_cmd_system_endpoint_tx_id: ble_command_ids = 9;
pub const ble_command_ids_ble_cmd_system_whitelist_append_id: ble_command_ids = 10;
pub const ble_command_ids_ble_cmd_system_whitelist_remove_id: ble_command_ids = 11;
pub const ble_command_ids_ble_cmd_system_whitelist_clear_id: ble_command_ids = 12;
pub const ble_command_ids_ble_cmd_system_endpoint_rx_id: ble_command_ids = 13;
pub const ble_command_ids_ble_cmd_system_endpoint_set_watermarks_id: ble_command_ids = 14;
pub const ble_command_ids_ble_cmd_system_aes_setkey_id: ble_command_ids = 15;
pub const ble_command_ids_ble_cmd_system_aes_encrypt_id: ble_command_ids = 16;
pub const ble_command_ids_ble_cmd_system_aes_decrypt_id: ble_command_ids = 17;
pub const ble_command_ids_ble_cmd_system_usb_enumeration_status_get_id: ble_command_ids = 18;
pub const ble_command_ids_ble_cmd_system_get_bootloader_crc_id: ble_command_ids = 19;
pub const ble_command_ids_ble_cmd_system_delay_reset_id: ble_command_ids = 20;
pub const ble_command_ids_ble_cmd_flash_ps_defrag_id: ble_command_ids = 0;
pub const ble_command_ids_ble_cmd_flash_ps_dump_id: ble_command_ids = 1;
pub const ble_command_ids_ble_cmd_flash_ps_erase_all_id: ble_command_ids = 2;
pub const ble_command_ids_ble_cmd_flash_ps_save_id: ble_command_ids = 3;
pub const ble_command_ids_ble_cmd_flash_ps_load_id: ble_command_ids = 4;
pub const ble_command_ids_ble_cmd_flash_ps_erase_id: ble_command_ids = 5;
pub const ble_command_ids_ble_cmd_flash_erase_page_id: ble_command_ids = 6;
pub const ble_command_ids_ble_cmd_flash_write_data_id: ble_command_ids = 7;
pub const ble_command_ids_ble_cmd_flash_read_data_id: ble_command_ids = 8;
pub const ble_command_ids_ble_cmd_attributes_write_id: ble_command_ids = 0;
pub const ble_command_ids_ble_cmd_attributes_read_id: ble_command_ids = 1;
pub const ble_command_ids_ble_cmd_attributes_read_type_id: ble_command_ids = 2;
pub const ble_command_ids_ble_cmd_attributes_user_read_response_id: ble_command_ids = 3;
pub const ble_command_ids_ble_cmd_attributes_user_write_response_id: ble_command_ids = 4;
pub const ble_command_ids_ble_cmd_attributes_send_id: ble_command_ids = 5;
pub const ble_command_ids_ble_cmd_connection_disconnect_id: ble_command_ids = 0;
pub const ble_command_ids_ble_cmd_connection_get_rssi_id: ble_command_ids = 1;
pub const ble_command_ids_ble_cmd_connection_update_id: ble_command_ids = 2;
pub const ble_command_ids_ble_cmd_connection_version_update_id: ble_command_ids = 3;
pub const ble_command_ids_ble_cmd_connection_channel_map_get_id: ble_command_ids = 4;
pub const ble_command_ids_ble_cmd_connection_channel_map_set_id: ble_command_ids = 5;
pub const ble_command_ids_ble_cmd_connection_features_get_id: ble_command_ids = 6;
pub const ble_command_ids_ble_cmd_connection_get_status_id: ble_command_ids = 7;
pub const ble_command_ids_ble_cmd_connection_raw_tx_id: ble_command_ids = 8;
pub const ble_command_ids_ble_cmd_connection_slave_latency_disable_id: ble_command_ids = 9;
pub const ble_command_ids_ble_cmd_attclient_find_by_type_value_id: ble_command_ids = 0;
pub const ble_command_ids_ble_cmd_attclient_read_by_group_type_id: ble_command_ids = 1;
pub const ble_command_ids_ble_cmd_attclient_read_by_type_id: ble_command_ids = 2;
pub const ble_command_ids_ble_cmd_attclient_find_information_id: ble_command_ids = 3;
pub const ble_command_ids_ble_cmd_attclient_read_by_handle_id: ble_command_ids = 4;
pub const ble_command_ids_ble_cmd_attclient_attribute_write_id: ble_command_ids = 5;
pub const ble_command_ids_ble_cmd_attclient_write_command_id: ble_command_ids = 6;
pub const ble_command_ids_ble_cmd_attclient_indicate_confirm_id: ble_command_ids = 7;
pub const ble_command_ids_ble_cmd_attclient_read_long_id: ble_command_ids = 8;
pub const ble_command_ids_ble_cmd_attclient_prepare_write_id: ble_command_ids = 9;
pub const ble_command_ids_ble_cmd_attclient_execute_write_id: ble_command_ids = 10;
pub const ble_command_ids_ble_cmd_attclient_read_multiple_id: ble_command_ids = 11;
pub const ble_command_ids_ble_cmd_sm_encrypt_start_id: ble_command_ids = 0;
pub const ble_command_ids_ble_cmd_sm_set_bondable_mode_id: ble_command_ids = 1;
pub const ble_command_ids_ble_cmd_sm_delete_bonding_id: ble_command_ids = 2;
pub const ble_command_ids_ble_cmd_sm_set_parameters_id: ble_command_ids = 3;
pub const ble_command_ids_ble_cmd_sm_passkey_entry_id: ble_command_ids = 4;
pub const ble_command_ids_ble_cmd_sm_get_bonds_id: ble_command_ids = 5;
pub const ble_command_ids_ble_cmd_sm_set_oob_data_id: ble_command_ids = 6;
pub const ble_command_ids_ble_cmd_sm_whitelist_bonds_id: ble_command_ids = 7;
pub const ble_command_ids_ble_cmd_sm_set_pairing_distribution_keys_id: ble_command_ids = 8;
pub const ble_command_ids_ble_cmd_gap_set_privacy_flags_id: ble_command_ids = 0;
pub const ble_command_ids_ble_cmd_gap_set_mode_id: ble_command_ids = 1;
pub const ble_command_ids_ble_cmd_gap_discover_id: ble_command_ids = 2;
pub const ble_command_ids_ble_cmd_gap_connect_direct_id: ble_command_ids = 3;
pub const ble_command_ids_ble_cmd_gap_end_procedure_id: ble_command_ids = 4;
pub const ble_command_ids_ble_cmd_gap_connect_selective_id: ble_command_ids = 5;
pub const ble_command_ids_ble_cmd_gap_set_filtering_id: ble_command_ids = 6;
pub const ble_command_ids_ble_cmd_gap_set_scan_parameters_id: ble_command_ids = 7;
pub const ble_command_ids_ble_cmd_gap_set_adv_parameters_id: ble_command_ids = 8;
pub const ble_command_ids_ble_cmd_gap_set_adv_data_id: ble_command_ids = 9;
pub const ble_command_ids_ble_cmd_gap_set_directed_connectable_mode_id: ble_command_ids = 10;
pub const ble_command_ids_ble_cmd_gap_set_initiating_con_parameters_id: ble_command_ids = 11;
pub const ble_command_ids_ble_cmd_gap_set_nonresolvable_address_id: ble_command_ids = 12;
pub const ble_command_ids_ble_cmd_hardware_io_port_config_irq_id: ble_command_ids = 0;
pub const ble_command_ids_ble_cmd_hardware_set_soft_timer_id: ble_command_ids = 1;
pub const ble_command_ids_ble_cmd_hardware_adc_read_id: ble_command_ids = 2;
pub const ble_command_ids_ble_cmd_hardware_io_port_config_direction_id: ble_command_ids = 3;
pub const ble_command_ids_ble_cmd_hardware_io_port_config_function_id: ble_command_ids = 4;
pub const ble_command_ids_ble_cmd_hardware_io_port_config_pull_id: ble_command_ids = 5;
pub const ble_command_ids_ble_cmd_hardware_io_port_write_id: ble_command_ids = 6;
pub const ble_command_ids_ble_cmd_hardware_io_port_read_id: ble_command_ids = 7;
pub const ble_command_ids_ble_cmd_hardware_spi_config_id: ble_command_ids = 8;
pub const ble_command_ids_ble_cmd_hardware_spi_transfer_id: ble_command_ids = 9;
pub const ble_command_ids_ble_cmd_hardware_i2c_read_id: ble_command_ids = 10;
pub const ble_command_ids_ble_cmd_hardware_i2c_write_id: ble_command_ids = 11;
pub const ble_command_ids_ble_cmd_hardware_set_txpower_id: ble_command_ids = 12;
pub const ble_command_ids_ble_cmd_hardware_timer_comparator_id: ble_command_ids = 13;
pub const ble_command_ids_ble_cmd_hardware_io_port_irq_enable_id: ble_command_ids = 14;
pub const ble_command_ids_ble_cmd_hardware_io_port_irq_direction_id: ble_command_ids = 15;
pub const ble_command_ids_ble_cmd_hardware_analog_comparator_enable_id: ble_command_ids = 16;
pub const ble_command_ids_ble_cmd_hardware_analog_comparator_read_id: ble_command_ids = 17;
pub const ble_command_ids_ble_cmd_hardware_analog_comparator_config_irq_id: ble_command_ids = 18;
pub const ble_command_ids_ble_cmd_hardware_set_rxgain_id: ble_command_ids = 19;
pub const ble_command_ids_ble_cmd_hardware_usb_enable_id: ble_command_ids = 20;
pub const ble_command_ids_ble_cmd_hardware_sleep_enable_id: ble_command_ids = 21;
pub const ble_command_ids_ble_cmd_hardware_get_timestamp_id: ble_command_ids = 22;
pub const ble_command_ids_ble_cmd_test_phy_tx_id: ble_command_ids = 0;
pub const ble_command_ids_ble_cmd_test_phy_rx_id: ble_command_ids = 1;
pub const ble_command_ids_ble_cmd_test_phy_end_id: ble_command_ids = 2;
pub const ble_command_ids_ble_cmd_test_phy_reset_id: ble_command_ids = 3;
pub const ble_command_ids_ble_cmd_test_get_channel_map_id: ble_command_ids = 4;
pub const ble_command_ids_ble_cmd_test_debug_id: ble_command_ids = 5;
pub const ble_command_ids_ble_cmd_test_channel_mode_id: ble_command_ids = 6;
pub const ble_command_ids_ble_cmd_dfu_reset_id: ble_command_ids = 0;
pub const ble_command_ids_ble_cmd_dfu_flash_set_address_id: ble_command_ids = 1;
pub const ble_command_ids_ble_cmd_dfu_flash_upload_id: ble_command_ids = 2;
pub const ble_command_ids_ble_cmd_dfu_flash_upload_finish_id: ble_command_ids = 3;
pub const ble_command_ids_ble_cmd_dfu_get_bootloader_crc_id: ble_command_ids = 4;
pub const ble_command_ids_ble_cmd_dfu_delay_reset_id: ble_command_ids = 5;
pub type ble_command_ids = ::std::os::raw::c_uint;
pub const ble_response_ids_ble_rsp_system_reset_id: ble_response_ids = 0;
pub const ble_response_ids_ble_rsp_system_hello_id: ble_response_ids = 1;
pub const ble_response_ids_ble_rsp_system_address_get_id: ble_response_ids = 2;
pub const ble_response_ids_ble_rsp_system_reg_write_id: ble_response_ids = 3;
pub const ble_response_ids_ble_rsp_system_reg_read_id: ble_response_ids = 4;
pub const ble_response_ids_ble_rsp_system_get_counters_id: ble_response_ids = 5;
pub const ble_response_ids_ble_rsp_system_get_connections_id: ble_response_ids = 6;
pub const ble_response_ids_ble_rsp_system_read_memory_id: ble_response_ids = 7;
pub const ble_response_ids_ble_rsp_system_get_info_id: ble_response_ids = 8;
pub const ble_response_ids_ble_rsp_system_endpoint_tx_id: ble_response_ids = 9;
pub const ble_response_ids_ble_rsp_system_whitelist_append_id: ble_response_ids = 10;
pub const ble_response_ids_ble_rsp_system_whitelist_remove_id: ble_response_ids = 11;
pub const ble_response_ids_ble_rsp_system_whitelist_clear_id: ble_response_ids = 12;
pub const ble_response_ids_ble_rsp_system_endpoint_rx_id: ble_response_ids = 13;
pub const ble_response_ids_ble_rsp_system_endpoint_set_watermarks_id: ble_response_ids = 14;
pub const ble_response_ids_ble_rsp_system_aes_setkey_id: ble_response_ids = 15;
pub const ble_response_ids_ble_rsp_system_aes_encrypt_id: ble_response_ids = 16;
pub const ble_response_ids_ble_rsp_system_aes_decrypt_id: ble_response_ids = 17;
pub const ble_response_ids_ble_rsp_system_usb_enumeration_status_get_id: ble_response_ids = 18;
pub const ble_response_ids_ble_rsp_system_get_bootloader_crc_id: ble_response_ids = 19;
pub const ble_response_ids_ble_rsp_system_delay_reset_id: ble_response_ids = 20;
pub const ble_response_ids_ble_rsp_flash_ps_defrag_id: ble_response_ids = 0;
pub const ble_response_ids_ble_rsp_flash_ps_dump_id: ble_response_ids = 1;
pub const ble_response_ids_ble_rsp_flash_ps_erase_all_id: ble_response_ids = 2;
pub const ble_response_ids_ble_rsp_flash_ps_save_id: ble_response_ids = 3;
pub const ble_response_ids_ble_rsp_flash_ps_load_id: ble_response_ids = 4;
pub const ble_response_ids_ble_rsp_flash_ps_erase_id: ble_response_ids = 5;
pub const ble_response_ids_ble_rsp_flash_erase_page_id: ble_response_ids = 6;
pub const ble_response_ids_ble_rsp_flash_write_data_id: ble_response_ids = 7;
pub const ble_response_ids_ble_rsp_flash_read_data_id: ble_response_ids = 8;
pub const ble_response_ids_ble_rsp_attributes_write_id: ble_response_ids = 0;
pub const ble_response_ids_ble_rsp_attributes_read_id: ble_response_ids = 1;
pub const ble_response_ids_ble_rsp_attributes_read_type_id: ble_response_ids = 2;
pub const ble_response_ids_ble_rsp_attributes_user_read_response_id: ble_response_ids = 3;
pub const ble_response_ids_ble_rsp_attributes_user_write_response_id: ble_response_ids = 4;
pub const ble_response_ids_ble_rsp_attributes_send_id: ble_response_ids = 5;
pub const ble_response_ids_ble_rsp_connection_disconnect_id: ble_response_ids = 0;
pub const ble_response_ids_ble_rsp_connection_get_rssi_id: ble_response_ids = 1;
pub const ble_response_ids_ble_rsp_connection_update_id: ble_response_ids = 2;
pub const ble_response_ids_ble_rsp_connection_version_update_id: ble_response_ids = 3;
pub const ble_response_ids_ble_rsp_connection_channel_map_get_id: ble_response_ids = 4;
pub const ble_response_ids_ble_rsp_connection_channel_map_set_id: ble_response_ids = 5;
pub const ble_response_ids_ble_rsp_connection_features_get_id: ble_response_ids = 6;
pub const ble_response_ids_ble_rsp_connection_get_status_id: ble_response_ids = 7;
pub const ble_response_ids_ble_rsp_connection_raw_tx_id: ble_response_ids = 8;
pub const ble_response_ids_ble_rsp_connection_slave_latency_disable_id: ble_response_ids = 9;
pub const ble_response_ids_ble_rsp_attclient_find_by_type_value_id: ble_response_ids = 0;
pub const ble_response_ids_ble_rsp_attclient_read_by_group_type_id: ble_response_ids = 1;
pub const ble_response_ids_ble_rsp_attclient_read_by_type_id: ble_response_ids = 2;
pub const ble_response_ids_ble_rsp_attclient_find_information_id: ble_response_ids = 3;
pub const ble_response_ids_ble_rsp_attclient_read_by_handle_id: ble_response_ids = 4;
pub const ble_response_ids_ble_rsp_attclient_attribute_write_id: ble_response_ids = 5;
pub const ble_response_ids_ble_rsp_attclient_write_command_id: ble_response_ids = 6;
pub const ble_response_ids_ble_rsp_attclient_indicate_confirm_id: ble_response_ids = 7;
pub const ble_response_ids_ble_rsp_attclient_read_long_id: ble_response_ids = 8;
pub const ble_response_ids_ble_rsp_attclient_prepare_write_id: ble_response_ids = 9;
pub const ble_response_ids_ble_rsp_attclient_execute_write_id: ble_response_ids = 10;
pub const ble_response_ids_ble_rsp_attclient_read_multiple_id: ble_response_ids = 11;
pub const ble_response_ids_ble_rsp_sm_encrypt_start_id: ble_response_ids = 0;
pub const ble_response_ids_ble_rsp_sm_set_bondable_mode_id: ble_response_ids = 1;
pub const ble_response_ids_ble_rsp_sm_delete_bonding_id: ble_response_ids = 2;
pub const ble_response_ids_ble_rsp_sm_set_parameters_id: ble_response_ids = 3;
pub const ble_response_ids_ble_rsp_sm_passkey_entry_id: ble_response_ids = 4;
pub const ble_response_ids_ble_rsp_sm_get_bonds_id: ble_response_ids = 5;
pub const ble_response_ids_ble_rsp_sm_set_oob_data_id: ble_response_ids = 6;
pub const ble_response_ids_ble_rsp_sm_whitelist_bonds_id: ble_response_ids = 7;
pub const ble_response_ids_ble_rsp_sm_set_pairing_distribution_keys_id: ble_response_ids = 8;
pub const ble_response_ids_ble_rsp_gap_set_privacy_flags_id: ble_response_ids = 0;
pub const ble_response_ids_ble_rsp_gap_set_mode_id: ble_response_ids = 1;
pub const ble_response_ids_ble_rsp_gap_discover_id: ble_response_ids = 2;
pub const ble_response_ids_ble_rsp_gap_connect_direct_id: ble_response_ids = 3;
pub const ble_response_ids_ble_rsp_gap_end_procedure_id: ble_response_ids = 4;
pub const ble_response_ids_ble_rsp_gap_connect_selective_id: ble_response_ids = 5;
pub const ble_response_ids_ble_rsp_gap_set_filtering_id: ble_response_ids = 6;
pub const ble_response_ids_ble_rsp_gap_set_scan_parameters_id: ble_response_ids = 7;
pub const ble_response_ids_ble_rsp_gap_set_adv_parameters_id: ble_response_ids = 8;
pub const ble_response_ids_ble_rsp_gap_set_adv_data_id: ble_response_ids = 9;
pub const ble_response_ids_ble_rsp_gap_set_directed_connectable_mode_id: ble_response_ids = 10;
pub const ble_response_ids_ble_rsp_gap_set_initiating_con_parameters_id: ble_response_ids = 11;
pub const ble_response_ids_ble_rsp_gap_set_nonresolvable_address_id: ble_response_ids = 12;
pub const ble_response_ids_ble_rsp_hardware_io_port_config_irq_id: ble_response_ids = 0;
pub const ble_response_ids_ble_rsp_hardware_set_soft_timer_id: ble_response_ids = 1;
pub const ble_response_ids_ble_rsp_hardware_adc_read_id: ble_response_ids = 2;
pub const ble_response_ids_ble_rsp_hardware_io_port_config_direction_id: ble_response_ids = 3;
pub const ble_response_ids_ble_rsp_hardware_io_port_config_function_id: ble_response_ids = 4;
pub const ble_response_ids_ble_rsp_hardware_io_port_config_pull_id: ble_response_ids = 5;
pub const ble_response_ids_ble_rsp_hardware_io_port_write_id: ble_response_ids = 6;
pub const ble_response_ids_ble_rsp_hardware_io_port_read_id: ble_response_ids = 7;
pub const ble_response_ids_ble_rsp_hardware_spi_config_id: ble_response_ids = 8;
pub const ble_response_ids_ble_rsp_hardware_spi_transfer_id: ble_response_ids = 9;
pub const ble_response_ids_ble_rsp_hardware_i2c_read_id: ble_response_ids = 10;
pub const ble_response_ids_ble_rsp_hardware_i2c_write_id: ble_response_ids = 11;
pub const ble_response_ids_ble_rsp_hardware_set_txpower_id: ble_response_ids = 12;
pub const ble_response_ids_ble_rsp_hardware_timer_comparator_id: ble_response_ids = 13;
pub const ble_response_ids_ble_rsp_hardware_io_port_irq_enable_id: ble_response_ids = 14;
pub const ble_response_ids_ble_rsp_hardware_io_port_irq_direction_id: ble_response_ids = 15;
pub const ble_response_ids_ble_rsp_hardware_analog_comparator_enable_id: ble_response_ids = 16;
pub const ble_response_ids_ble_rsp_hardware_analog_comparator_read_id: ble_response_ids = 17;
pub const ble_response_ids_ble_rsp_hardware_analog_comparator_config_irq_id: ble_response_ids = 18;
pub const ble_response_ids_ble_rsp_hardware_set_rxgain_id: ble_response_ids = 19;
pub const ble_response_ids_ble_rsp_hardware_usb_enable_id: ble_response_ids = 20;
pub const ble_response_ids_ble_rsp_hardware_sleep_enable_id: ble_response_ids = 21;
pub const ble_response_ids_ble_rsp_hardware_get_timestamp_id: ble_response_ids = 22;
pub const ble_response_ids_ble_rsp_test_phy_tx_id: ble_response_ids = 0;
pub const ble_response_ids_ble_rsp_test_phy_rx_id: ble_response_ids = 1;
pub const ble_response_ids_ble_rsp_test_phy_end_id: ble_response_ids = 2;
pub const ble_response_ids_ble_rsp_test_phy_reset_id: ble_response_ids = 3;
pub const ble_response_ids_ble_rsp_test_get_channel_map_id: ble_response_ids = 4;
pub const ble_response_ids_ble_rsp_test_debug_id: ble_response_ids = 5;
pub const ble_response_ids_ble_rsp_test_channel_mode_id: ble_response_ids = 6;
pub const ble_response_ids_ble_rsp_dfu_reset_id: ble_response_ids = 0;
pub const ble_response_ids_ble_rsp_dfu_flash_set_address_id: ble_response_ids = 1;
pub const ble_response_ids_ble_rsp_dfu_flash_upload_id: ble_response_ids = 2;
pub const ble_response_ids_ble_rsp_dfu_flash_upload_finish_id: ble_response_ids = 3;
pub const ble_response_ids_ble_rsp_dfu_get_bootloader_crc_id: ble_response_ids = 4;
pub const ble_response_ids_ble_rsp_dfu_delay_reset_id: ble_response_ids = 5;
pub type ble_response_ids = ::std::os::raw::c_uint;
pub const ble_event_ids_ble_evt_system_boot_id: ble_event_ids = 0;
pub const ble_event_ids_ble_evt_system_debug_id: ble_event_ids = 1;
pub const ble_event_ids_ble_evt_system_endpoint_watermark_rx_id: ble_event_ids = 2;
pub const ble_event_ids_ble_evt_system_endpoint_watermark_tx_id: ble_event_ids = 3;
pub const ble_event_ids_ble_evt_system_script_failure_id: ble_event_ids = 4;
pub const ble_event_ids_ble_evt_system_no_license_key_id: ble_event_ids = 5;
pub const ble_event_ids_ble_evt_system_protocol_error_id: ble_event_ids = 6;
pub const ble_event_ids_ble_evt_system_usb_enumerated_id: ble_event_ids = 7;
pub const ble_event_ids_ble_evt_flash_ps_key_id: ble_event_ids = 0;
pub const ble_event_ids_ble_evt_attributes_value_id: ble_event_ids = 0;
pub const ble_event_ids_ble_evt_attributes_user_read_request_id: ble_event_ids = 1;
pub const ble_event_ids_ble_evt_attributes_status_id: ble_event_ids = 2;
pub const ble_event_ids_ble_evt_connection_status_id: ble_event_ids = 0;
pub const ble_event_ids_ble_evt_connection_version_ind_id: ble_event_ids = 1;
pub const ble_event_ids_ble_evt_connection_feature_ind_id: ble_event_ids = 2;
pub const ble_event_ids_ble_evt_connection_raw_rx_id: ble_event_ids = 3;
pub const ble_event_ids_ble_evt_connection_disconnected_id: ble_event_ids = 4;
pub const ble_event_ids_ble_evt_attclient_indicated_id: ble_event_ids = 0;
pub const ble_event_ids_ble_evt_attclient_procedure_completed_id: ble_event_ids = 1;
pub const ble_event_ids_ble_evt_attclient_group_found_id: ble_event_ids = 2;
pub const ble_event_ids_ble_evt_attclient_attribute_found_id: ble_event_ids = 3;
pub const ble_event_ids_ble_evt_attclient_find_information_found_id: ble_event_ids = 4;
pub const ble_event_ids_ble_evt_attclient_attribute_value_id: ble_event_ids = 5;
pub const ble_event_ids_ble_evt_attclient_read_multiple_response_id: ble_event_ids = 6;
pub const ble_event_ids_ble_evt_sm_smp_data_id: ble_event_ids = 0;
pub const ble_event_ids_ble_evt_sm_bonding_fail_id: ble_event_ids = 1;
pub const ble_event_ids_ble_evt_sm_passkey_display_id: ble_event_ids = 2;
pub const ble_event_ids_ble_evt_sm_passkey_request_id: ble_event_ids = 3;
pub const ble_event_ids_ble_evt_sm_bond_status_id: ble_event_ids = 4;
pub const ble_event_ids_ble_evt_gap_scan_response_id: ble_event_ids = 0;
pub const ble_event_ids_ble_evt_gap_mode_changed_id: ble_event_ids = 1;
pub const ble_event_ids_ble_evt_hardware_io_port_status_id: ble_event_ids = 0;
pub const ble_event_ids_ble_evt_hardware_soft_timer_id: ble_event_ids = 1;
pub const ble_event_ids_ble_evt_hardware_adc_result_id: ble_event_ids = 2;
pub const ble_event_ids_ble_evt_hardware_analog_comparator_status_id: ble_event_ids = 3;
pub const ble_event_ids_ble_evt_hardware_radio_error_id: ble_event_ids = 4;
pub const ble_event_ids_ble_evt_dfu_boot_id: ble_event_ids = 0;
pub type ble_event_ids = ::std::os::raw::c_uint;
pub const ble_msg_idx_ble_cmd_system_reset_idx: ble_msg_idx = 0;
pub const ble_msg_idx_ble_cmd_system_hello_idx: ble_msg_idx = 1;
pub const ble_msg_idx_ble_cmd_system_address_get_idx: ble_msg_idx = 2;
pub const ble_msg_idx_ble_cmd_system_reg_write_idx: ble_msg_idx = 3;
pub const ble_msg_idx_ble_cmd_system_reg_read_idx: ble_msg_idx = 4;
pub const ble_msg_idx_ble_cmd_system_get_counters_idx: ble_msg_idx = 5;
pub const ble_msg_idx_ble_cmd_system_get_connections_idx: ble_msg_idx = 6;
pub const ble_msg_idx_ble_cmd_system_read_memory_idx: ble_msg_idx = 7;
pub const ble_msg_idx_ble_cmd_system_get_info_idx: ble_msg_idx = 8;
pub const ble_msg_idx_ble_cmd_system_endpoint_tx_idx: ble_msg_idx = 9;
pub const ble_msg_idx_ble_cmd_system_whitelist_append_idx: ble_msg_idx = 10;
pub const ble_msg_idx_ble_cmd_system_whitelist_remove_idx: ble_msg_idx = 11;
pub const ble_msg_idx_ble_cmd_system_whitelist_clear_idx: ble_msg_idx = 12;
pub const ble_msg_idx_ble_cmd_system_endpoint_rx_idx: ble_msg_idx = 13;
pub const ble_msg_idx_ble_cmd_system_endpoint_set_watermarks_idx: ble_msg_idx = 14;
pub const ble_msg_idx_ble_cmd_system_aes_setkey_idx: ble_msg_idx = 15;
pub const ble_msg_idx_ble_cmd_system_aes_encrypt_idx: ble_msg_idx = 16;
pub const ble_msg_idx_ble_cmd_system_aes_decrypt_idx: ble_msg_idx = 17;
pub const ble_msg_idx_ble_cmd_system_usb_enumeration_status_get_idx: ble_msg_idx = 18;
pub const ble_msg_idx_ble_cmd_system_get_bootloader_crc_idx: ble_msg_idx = 19;
pub const ble_msg_idx_ble_cmd_system_delay_reset_idx: ble_msg_idx = 20;
pub const ble_msg_idx_ble_cmd_flash_ps_defrag_idx: ble_msg_idx = 21;
pub const ble_msg_idx_ble_cmd_flash_ps_dump_idx: ble_msg_idx = 22;
pub const ble_msg_idx_ble_cmd_flash_ps_erase_all_idx: ble_msg_idx = 23;
pub const ble_msg_idx_ble_cmd_flash_ps_save_idx: ble_msg_idx = 24;
pub const ble_msg_idx_ble_cmd_flash_ps_load_idx: ble_msg_idx = 25;
pub const ble_msg_idx_ble_cmd_flash_ps_erase_idx: ble_msg_idx = 26;
pub const ble_msg_idx_ble_cmd_flash_erase_page_idx: ble_msg_idx = 27;
pub const ble_msg_idx_ble_cmd_flash_write_data_idx: ble_msg_idx = 28;
pub const ble_msg_idx_ble_cmd_flash_read_data_idx: ble_msg_idx = 29;
pub const ble_msg_idx_ble_cmd_attributes_write_idx: ble_msg_idx = 30;
pub const ble_msg_idx_ble_cmd_attributes_read_idx: ble_msg_idx = 31;
pub const ble_msg_idx_ble_cmd_attributes_read_type_idx: ble_msg_idx = 32;
pub const ble_msg_idx_ble_cmd_attributes_user_read_response_idx: ble_msg_idx = 33;
pub const ble_msg_idx_ble_cmd_attributes_user_write_response_idx: ble_msg_idx = 34;
pub const ble_msg_idx_ble_cmd_attributes_send_idx: ble_msg_idx = 35;
pub const ble_msg_idx_ble_cmd_connection_disconnect_idx: ble_msg_idx = 36;
pub const ble_msg_idx_ble_cmd_connection_get_rssi_idx: ble_msg_idx = 37;
pub const ble_msg_idx_ble_cmd_connection_update_idx: ble_msg_idx = 38;
pub const ble_msg_idx_ble_cmd_connection_version_update_idx: ble_msg_idx = 39;
pub const ble_msg_idx_ble_cmd_connection_channel_map_get_idx: ble_msg_idx = 40;
pub const ble_msg_idx_ble_cmd_connection_channel_map_set_idx: ble_msg_idx = 41;
pub const ble_msg_idx_ble_cmd_connection_features_get_idx: ble_msg_idx = 42;
pub const ble_msg_idx_ble_cmd_connection_get_status_idx: ble_msg_idx = 43;
pub const ble_msg_idx_ble_cmd_connection_raw_tx_idx: ble_msg_idx = 44;
pub const ble_msg_idx_ble_cmd_connection_slave_latency_disable_idx: ble_msg_idx = 45;
pub const ble_msg_idx_ble_cmd_attclient_find_by_type_value_idx: ble_msg_idx = 46;
pub const ble_msg_idx_ble_cmd_attclient_read_by_group_type_idx: ble_msg_idx = 47;
pub const ble_msg_idx_ble_cmd_attclient_read_by_type_idx: ble_msg_idx = 48;
pub const ble_msg_idx_ble_cmd_attclient_find_information_idx: ble_msg_idx = 49;
pub const ble_msg_idx_ble_cmd_attclient_read_by_handle_idx: ble_msg_idx = 50;
pub const ble_msg_idx_ble_cmd_attclient_attribute_write_idx: ble_msg_idx = 51;
pub const ble_msg_idx_ble_cmd_attclient_write_command_idx: ble_msg_idx = 52;
pub const ble_msg_idx_ble_cmd_attclient_indicate_confirm_idx: ble_msg_idx = 53;
pub const ble_msg_idx_ble_cmd_attclient_read_long_idx: ble_msg_idx = 54;
pub const ble_msg_idx_ble_cmd_attclient_prepare_write_idx: ble_msg_idx = 55;
pub const ble_msg_idx_ble_cmd_attclient_execute_write_idx: ble_msg_idx = 56;
pub const ble_msg_idx_ble_cmd_attclient_read_multiple_idx: ble_msg_idx = 57;
pub const ble_msg_idx_ble_cmd_sm_encrypt_start_idx: ble_msg_idx = 58;
pub const ble_msg_idx_ble_cmd_sm_set_bondable_mode_idx: ble_msg_idx = 59;
pub const ble_msg_idx_ble_cmd_sm_delete_bonding_idx: ble_msg_idx = 60;
pub const ble_msg_idx_ble_cmd_sm_set_parameters_idx: ble_msg_idx = 61;
pub const ble_msg_idx_ble_cmd_sm_passkey_entry_idx: ble_msg_idx = 62;
pub const ble_msg_idx_ble_cmd_sm_get_bonds_idx: ble_msg_idx = 63;
pub const ble_msg_idx_ble_cmd_sm_set_oob_data_idx: ble_msg_idx = 64;
pub const ble_msg_idx_ble_cmd_sm_whitelist_bonds_idx: ble_msg_idx = 65;
pub const ble_msg_idx_ble_cmd_sm_set_pairing_distribution_keys_idx: ble_msg_idx = 66;
pub const ble_msg_idx_ble_cmd_gap_set_privacy_flags_idx: ble_msg_idx = 67;
pub const ble_msg_idx_ble_cmd_gap_set_mode_idx: ble_msg_idx = 68;
pub const ble_msg_idx_ble_cmd_gap_discover_idx: ble_msg_idx = 69;
pub const ble_msg_idx_ble_cmd_gap_connect_direct_idx: ble_msg_idx = 70;
pub const ble_msg_idx_ble_cmd_gap_end_procedure_idx: ble_msg_idx = 71;
pub const ble_msg_idx_ble_cmd_gap_connect_selective_idx: ble_msg_idx = 72;
pub const ble_msg_idx_ble_cmd_gap_set_filtering_idx: ble_msg_idx = 73;
pub const ble_msg_idx_ble_cmd_gap_set_scan_parameters_idx: ble_msg_idx = 74;
pub const ble_msg_idx_ble_cmd_gap_set_adv_parameters_idx: ble_msg_idx = 75;
pub const ble_msg_idx_ble_cmd_gap_set_adv_data_idx: ble_msg_idx = 76;
pub const ble_msg_idx_ble_cmd_gap_set_directed_connectable_mode_idx: ble_msg_idx = 77;
pub const ble_msg_idx_ble_cmd_gap_set_initiating_con_parameters_idx: ble_msg_idx = 78;
pub const ble_msg_idx_ble_cmd_gap_set_nonresolvable_address_idx: ble_msg_idx = 79;
pub const ble_msg_idx_ble_cmd_hardware_io_port_config_irq_idx: ble_msg_idx = 80;
pub const ble_msg_idx_ble_cmd_hardware_set_soft_timer_idx: ble_msg_idx = 81;
pub const ble_msg_idx_ble_cmd_hardware_adc_read_idx: ble_msg_idx = 82;
pub const ble_msg_idx_ble_cmd_hardware_io_port_config_direction_idx: ble_msg_idx = 83;
pub const ble_msg_idx_ble_cmd_hardware_io_port_config_function_idx: ble_msg_idx = 84;
pub const ble_msg_idx_ble_cmd_hardware_io_port_config_pull_idx: ble_msg_idx = 85;
pub const ble_msg_idx_ble_cmd_hardware_io_port_write_idx: ble_msg_idx = 86;
pub const ble_msg_idx_ble_cmd_hardware_io_port_read_idx: ble_msg_idx = 87;
pub const ble_msg_idx_ble_cmd_hardware_spi_config_idx: ble_msg_idx = 88;
pub const ble_msg_idx_ble_cmd_hardware_spi_transfer_idx: ble_msg_idx = 89;
pub const ble_msg_idx_ble_cmd_hardware_i2c_read_idx: ble_msg_idx = 90;
pub const ble_msg_idx_ble_cmd_hardware_i2c_write_idx: ble_msg_idx = 91;
pub const ble_msg_idx_ble_cmd_hardware_set_txpower_idx: ble_msg_idx = 92;
pub const ble_msg_idx_ble_cmd_hardware_timer_comparator_idx: ble_msg_idx = 93;
pub const ble_msg_idx_ble_cmd_hardware_io_port_irq_enable_idx: ble_msg_idx = 94;
pub const ble_msg_idx_ble_cmd_hardware_io_port_irq_direction_idx: ble_msg_idx = 95;
pub const ble_msg_idx_ble_cmd_hardware_analog_comparator_enable_idx: ble_msg_idx = 96;
pub const ble_msg_idx_ble_cmd_hardware_analog_comparator_read_idx: ble_msg_idx = 97;
pub const ble_msg_idx_ble_cmd_hardware_analog_comparator_config_irq_idx: ble_msg_idx = 98;
pub const ble_msg_idx_ble_cmd_hardware_set_rxgain_idx: ble_msg_idx = 99;
pub const ble_msg_idx_ble_cmd_hardware_usb_enable_idx: ble_msg_idx = 100;
pub const ble_msg_idx_ble_cmd_hardware_sleep_enable_idx: ble_msg_idx = 101;
pub const ble_msg_idx_ble_cmd_hardware_get_timestamp_idx: ble_msg_idx = 102;
pub const ble_msg_idx_ble_cmd_test_phy_tx_idx: ble_msg_idx = 103;
pub const ble_msg_idx_ble_cmd_test_phy_rx_idx: ble_msg_idx = 104;
pub const ble_msg_idx_ble_cmd_test_phy_end_idx: ble_msg_idx = 105;
pub const ble_msg_idx_ble_cmd_test_phy_reset_idx: ble_msg_idx = 106;
pub const ble_msg_idx_ble_cmd_test_get_channel_map_idx: ble_msg_idx = 107;
pub const ble_msg_idx_ble_cmd_test_debug_idx: ble_msg_idx = 108;
pub const ble_msg_idx_ble_cmd_test_channel_mode_idx: ble_msg_idx = 109;
pub const ble_msg_idx_ble_cmd_dfu_reset_idx: ble_msg_idx = 110;
pub const ble_msg_idx_ble_cmd_dfu_flash_set_address_idx: ble_msg_idx = 111;
pub const ble_msg_idx_ble_cmd_dfu_flash_upload_idx: ble_msg_idx = 112;
pub const ble_msg_idx_ble_cmd_dfu_flash_upload_finish_idx: ble_msg_idx = 113;
pub const ble_msg_idx_ble_cmd_dfu_get_bootloader_crc_idx: ble_msg_idx = 114;
pub const ble_msg_idx_ble_cmd_dfu_delay_reset_idx: ble_msg_idx = 115;
pub const ble_msg_idx_ble_rsp_system_reset_idx: ble_msg_idx = 116;
pub const ble_msg_idx_ble_rsp_system_hello_idx: ble_msg_idx = 117;
pub const ble_msg_idx_ble_rsp_system_address_get_idx: ble_msg_idx = 118;
pub const ble_msg_idx_ble_rsp_system_reg_write_idx: ble_msg_idx = 119;
pub const ble_msg_idx_ble_rsp_system_reg_read_idx: ble_msg_idx = 120;
pub const ble_msg_idx_ble_rsp_system_get_counters_idx: ble_msg_idx = 121;
pub const ble_msg_idx_ble_rsp_system_get_connections_idx: ble_msg_idx = 122;
pub const ble_msg_idx_ble_rsp_system_read_memory_idx: ble_msg_idx = 123;
pub const ble_msg_idx_ble_rsp_system_get_info_idx: ble_msg_idx = 124;
pub const ble_msg_idx_ble_rsp_system_endpoint_tx_idx: ble_msg_idx = 125;
pub const ble_msg_idx_ble_rsp_system_whitelist_append_idx: ble_msg_idx = 126;
pub const ble_msg_idx_ble_rsp_system_whitelist_remove_idx: ble_msg_idx = 127;
pub const ble_msg_idx_ble_rsp_system_whitelist_clear_idx: ble_msg_idx = 128;
pub const ble_msg_idx_ble_rsp_system_endpoint_rx_idx: ble_msg_idx = 129;
pub const ble_msg_idx_ble_rsp_system_endpoint_set_watermarks_idx: ble_msg_idx = 130;
pub const ble_msg_idx_ble_rsp_system_aes_setkey_idx: ble_msg_idx = 131;
pub const ble_msg_idx_ble_rsp_system_aes_encrypt_idx: ble_msg_idx = 132;
pub const ble_msg_idx_ble_rsp_system_aes_decrypt_idx: ble_msg_idx = 133;
pub const ble_msg_idx_ble_rsp_system_usb_enumeration_status_get_idx: ble_msg_idx = 134;
pub const ble_msg_idx_ble_rsp_system_get_bootloader_crc_idx: ble_msg_idx = 135;
pub const ble_msg_idx_ble_rsp_system_delay_reset_idx: ble_msg_idx = 136;
pub const ble_msg_idx_ble_rsp_flash_ps_defrag_idx: ble_msg_idx = 137;
pub const ble_msg_idx_ble_rsp_flash_ps_dump_idx: ble_msg_idx = 138;
pub const ble_msg_idx_ble_rsp_flash_ps_erase_all_idx: ble_msg_idx = 139;
pub const ble_msg_idx_ble_rsp_flash_ps_save_idx: ble_msg_idx = 140;
pub const ble_msg_idx_ble_rsp_flash_ps_load_idx: ble_msg_idx = 141;
pub const ble_msg_idx_ble_rsp_flash_ps_erase_idx: ble_msg_idx = 142;
pub const ble_msg_idx_ble_rsp_flash_erase_page_idx: ble_msg_idx = 143;
pub const ble_msg_idx_ble_rsp_flash_write_data_idx: ble_msg_idx = 144;
pub const ble_msg_idx_ble_rsp_flash_read_data_idx: ble_msg_idx = 145;
pub const ble_msg_idx_ble_rsp_attributes_write_idx: ble_msg_idx = 146;
pub const ble_msg_idx_ble_rsp_attributes_read_idx: ble_msg_idx = 147;
pub const ble_msg_idx_ble_rsp_attributes_read_type_idx: ble_msg_idx = 148;
pub const ble_msg_idx_ble_rsp_attributes_user_read_response_idx: ble_msg_idx = 149;
pub const ble_msg_idx_ble_rsp_attributes_user_write_response_idx: ble_msg_idx = 150;
pub const ble_msg_idx_ble_rsp_attributes_send_idx: ble_msg_idx = 151;
pub const ble_msg_idx_ble_rsp_connection_disconnect_idx: ble_msg_idx = 152;
pub const ble_msg_idx_ble_rsp_connection_get_rssi_idx: ble_msg_idx = 153;
pub const ble_msg_idx_ble_rsp_connection_update_idx: ble_msg_idx = 154;
pub const ble_msg_idx_ble_rsp_connection_version_update_idx: ble_msg_idx = 155;
pub const ble_msg_idx_ble_rsp_connection_channel_map_get_idx: ble_msg_idx = 156;
pub const ble_msg_idx_ble_rsp_connection_channel_map_set_idx: ble_msg_idx = 157;
pub const ble_msg_idx_ble_rsp_connection_features_get_idx: ble_msg_idx = 158;
pub const ble_msg_idx_ble_rsp_connection_get_status_idx: ble_msg_idx = 159;
pub const ble_msg_idx_ble_rsp_connection_raw_tx_idx: ble_msg_idx = 160;
pub const ble_msg_idx_ble_rsp_connection_slave_latency_disable_idx: ble_msg_idx = 161;
pub const ble_msg_idx_ble_rsp_attclient_find_by_type_value_idx: ble_msg_idx = 162;
pub const ble_msg_idx_ble_rsp_attclient_read_by_group_type_idx: ble_msg_idx = 163;
pub const ble_msg_idx_ble_rsp_attclient_read_by_type_idx: ble_msg_idx = 164;
pub const ble_msg_idx_ble_rsp_attclient_find_information_idx: ble_msg_idx = 165;
pub const ble_msg_idx_ble_rsp_attclient_read_by_handle_idx: ble_msg_idx = 166;
pub const ble_msg_idx_ble_rsp_attclient_attribute_write_idx: ble_msg_idx = 167;
pub const ble_msg_idx_ble_rsp_attclient_write_command_idx: ble_msg_idx = 168;
pub const ble_msg_idx_ble_rsp_attclient_indicate_confirm_idx: ble_msg_idx = 169;
pub const ble_msg_idx_ble_rsp_attclient_read_long_idx: ble_msg_idx = 170;
pub const ble_msg_idx_ble_rsp_attclient_prepare_write_idx: ble_msg_idx = 171;
pub const ble_msg_idx_ble_rsp_attclient_execute_write_idx: ble_msg_idx = 172;
pub const ble_msg_idx_ble_rsp_attclient_read_multiple_idx: ble_msg_idx = 173;
pub const ble_msg_idx_ble_rsp_sm_encrypt_start_idx: ble_msg_idx = 174;
pub const ble_msg_idx_ble_rsp_sm_set_bondable_mode_idx: ble_msg_idx = 175;
pub const ble_msg_idx_ble_rsp_sm_delete_bonding_idx: ble_msg_idx = 176;
pub const ble_msg_idx_ble_rsp_sm_set_parameters_idx: ble_msg_idx = 177;
pub const ble_msg_idx_ble_rsp_sm_passkey_entry_idx: ble_msg_idx = 178;
pub const ble_msg_idx_ble_rsp_sm_get_bonds_idx: ble_msg_idx = 179;
pub const ble_msg_idx_ble_rsp_sm_set_oob_data_idx: ble_msg_idx = 180;
pub const ble_msg_idx_ble_rsp_sm_whitelist_bonds_idx: ble_msg_idx = 181;
pub const ble_msg_idx_ble_rsp_sm_set_pairing_distribution_keys_idx: ble_msg_idx = 182;
pub const ble_msg_idx_ble_rsp_gap_set_privacy_flags_idx: ble_msg_idx = 183;
pub const ble_msg_idx_ble_rsp_gap_set_mode_idx: ble_msg_idx = 184;
pub const ble_msg_idx_ble_rsp_gap_discover_idx: ble_msg_idx = 185;
pub const ble_msg_idx_ble_rsp_gap_connect_direct_idx: ble_msg_idx = 186;
pub const ble_msg_idx_ble_rsp_gap_end_procedure_idx: ble_msg_idx = 187;
pub const ble_msg_idx_ble_rsp_gap_connect_selective_idx: ble_msg_idx = 188;
pub const ble_msg_idx_ble_rsp_gap_set_filtering_idx: ble_msg_idx = 189;
pub const ble_msg_idx_ble_rsp_gap_set_scan_parameters_idx: ble_msg_idx = 190;
pub const ble_msg_idx_ble_rsp_gap_set_adv_parameters_idx: ble_msg_idx = 191;
pub const ble_msg_idx_ble_rsp_gap_set_adv_data_idx: ble_msg_idx = 192;
pub const ble_msg_idx_ble_rsp_gap_set_directed_connectable_mode_idx: ble_msg_idx = 193;
pub const ble_msg_idx_ble_rsp_gap_set_initiating_con_parameters_idx: ble_msg_idx = 194;
pub const ble_msg_idx_ble_rsp_gap_set_nonresolvable_address_idx: ble_msg_idx = 195;
pub const ble_msg_idx_ble_rsp_hardware_io_port_config_irq_idx: ble_msg_idx = 196;
pub const ble_msg_idx_ble_rsp_hardware_set_soft_timer_idx: ble_msg_idx = 197;
pub const ble_msg_idx_ble_rsp_hardware_adc_read_idx: ble_msg_idx = 198;
pub const ble_msg_idx_ble_rsp_hardware_io_port_config_direction_idx: ble_msg_idx = 199;
pub const ble_msg_idx_ble_rsp_hardware_io_port_config_function_idx: ble_msg_idx = 200;
pub const ble_msg_idx_ble_rsp_hardware_io_port_config_pull_idx: ble_msg_idx = 201;
pub const ble_msg_idx_ble_rsp_hardware_io_port_write_idx: ble_msg_idx = 202;
pub const ble_msg_idx_ble_rsp_hardware_io_port_read_idx: ble_msg_idx = 203;
pub const ble_msg_idx_ble_rsp_hardware_spi_config_idx: ble_msg_idx = 204;
pub const ble_msg_idx_ble_rsp_hardware_spi_transfer_idx: ble_msg_idx = 205;
pub const ble_msg_idx_ble_rsp_hardware_i2c_read_idx: ble_msg_idx = 206;
pub const ble_msg_idx_ble_rsp_hardware_i2c_write_idx: ble_msg_idx = 207;
pub const ble_msg_idx_ble_rsp_hardware_set_txpower_idx: ble_msg_idx = 208;
pub const ble_msg_idx_ble_rsp_hardware_timer_comparator_idx: ble_msg_idx = 209;
pub const ble_msg_idx_ble_rsp_hardware_io_port_irq_enable_idx: ble_msg_idx = 210;
pub const ble_msg_idx_ble_rsp_hardware_io_port_irq_direction_idx: ble_msg_idx = 211;
pub const ble_msg_idx_ble_rsp_hardware_analog_comparator_enable_idx: ble_msg_idx = 212;
pub const ble_msg_idx_ble_rsp_hardware_analog_comparator_read_idx: ble_msg_idx = 213;
pub const ble_msg_idx_ble_rsp_hardware_analog_comparator_config_irq_idx: ble_msg_idx = 214;
pub const ble_msg_idx_ble_rsp_hardware_set_rxgain_idx: ble_msg_idx = 215;
pub const ble_msg_idx_ble_rsp_hardware_usb_enable_idx: ble_msg_idx = 216;
pub const ble_msg_idx_ble_rsp_hardware_sleep_enable_idx: ble_msg_idx = 217;
pub const ble_msg_idx_ble_rsp_hardware_get_timestamp_idx: ble_msg_idx = 218;
pub const ble_msg_idx_ble_rsp_test_phy_tx_idx: ble_msg_idx = 219;
pub const ble_msg_idx_ble_rsp_test_phy_rx_idx: ble_msg_idx = 220;
pub const ble_msg_idx_ble_rsp_test_phy_end_idx: ble_msg_idx = 221;
pub const ble_msg_idx_ble_rsp_test_phy_reset_idx: ble_msg_idx = 222;
pub const ble_msg_idx_ble_rsp_test_get_channel_map_idx: ble_msg_idx = 223;
pub const ble_msg_idx_ble_rsp_test_debug_idx: ble_msg_idx = 224;
pub const ble_msg_idx_ble_rsp_test_channel_mode_idx: ble_msg_idx = 225;
pub const ble_msg_idx_ble_rsp_dfu_reset_idx: ble_msg_idx = 226;
pub const ble_msg_idx_ble_rsp_dfu_flash_set_address_idx: ble_msg_idx = 227;
pub const ble_msg_idx_ble_rsp_dfu_flash_upload_idx: ble_msg_idx = 228;
pub const ble_msg_idx_ble_rsp_dfu_flash_upload_finish_idx: ble_msg_idx = 229;
pub const ble_msg_idx_ble_rsp_dfu_get_bootloader_crc_idx: ble_msg_idx = 230;
pub const ble_msg_idx_ble_rsp_dfu_delay_reset_idx: ble_msg_idx = 231;
pub const ble_msg_idx_ble_evt_system_boot_idx: ble_msg_idx = 232;
pub const ble_msg_idx_ble_evt_system_debug_idx: ble_msg_idx = 233;
pub const ble_msg_idx_ble_evt_system_endpoint_watermark_rx_idx: ble_msg_idx = 234;
pub const ble_msg_idx_ble_evt_system_endpoint_watermark_tx_idx: ble_msg_idx = 235;
pub const ble_msg_idx_ble_evt_system_script_failure_idx: ble_msg_idx = 236;
pub const ble_msg_idx_ble_evt_system_no_license_key_idx: ble_msg_idx = 237;
pub const ble_msg_idx_ble_evt_system_protocol_error_idx: ble_msg_idx = 238;
pub const ble_msg_idx_ble_evt_system_usb_enumerated_idx: ble_msg_idx = 239;
pub const ble_msg_idx_ble_evt_flash_ps_key_idx: ble_msg_idx = 240;
pub const ble_msg_idx_ble_evt_attributes_value_idx: ble_msg_idx = 241;
pub const ble_msg_idx_ble_evt_attributes_user_read_request_idx: ble_msg_idx = 242;
pub const ble_msg_idx_ble_evt_attributes_status_idx: ble_msg_idx = 243;
pub const ble_msg_idx_ble_evt_connection_status_idx: ble_msg_idx = 244;
pub const ble_msg_idx_ble_evt_connection_version_ind_idx: ble_msg_idx = 245;
pub const ble_msg_idx_ble_evt_connection_feature_ind_idx: ble_msg_idx = 246;
pub const ble_msg_idx_ble_evt_connection_raw_rx_idx: ble_msg_idx = 247;
pub const ble_msg_idx_ble_evt_connection_disconnected_idx: ble_msg_idx = 248;
pub const ble_msg_idx_ble_evt_attclient_indicated_idx: ble_msg_idx = 249;
pub const ble_msg_idx_ble_evt_attclient_procedure_completed_idx: ble_msg_idx = 250;
pub const ble_msg_idx_ble_evt_attclient_group_found_idx: ble_msg_idx = 251;
pub const ble_msg_idx_ble_evt_attclient_attribute_found_idx: ble_msg_idx = 252;
pub const ble_msg_idx_ble_evt_attclient_find_information_found_idx: ble_msg_idx = 253;
pub const ble_msg_idx_ble_evt_attclient_attribute_value_idx: ble_msg_idx = 254;
pub const ble_msg_idx_ble_evt_attclient_read_multiple_response_idx: ble_msg_idx = 255;
pub const ble_msg_idx_ble_evt_sm_smp_data_idx: ble_msg_idx = 256;
pub const ble_msg_idx_ble_evt_sm_bonding_fail_idx: ble_msg_idx = 257;
pub const ble_msg_idx_ble_evt_sm_passkey_display_idx: ble_msg_idx = 258;
pub const ble_msg_idx_ble_evt_sm_passkey_request_idx: ble_msg_idx = 259;
pub const ble_msg_idx_ble_evt_sm_bond_status_idx: ble_msg_idx = 260;
pub const ble_msg_idx_ble_evt_gap_scan_response_idx: ble_msg_idx = 261;
pub const ble_msg_idx_ble_evt_gap_mode_changed_idx: ble_msg_idx = 262;
pub const ble_msg_idx_ble_evt_hardware_io_port_status_idx: ble_msg_idx = 263;
pub const ble_msg_idx_ble_evt_hardware_soft_timer_idx: ble_msg_idx = 264;
pub const ble_msg_idx_ble_evt_hardware_adc_result_idx: ble_msg_idx = 265;
pub const ble_msg_idx_ble_evt_hardware_analog_comparator_status_idx: ble_msg_idx = 266;
pub const ble_msg_idx_ble_evt_hardware_radio_error_idx: ble_msg_idx = 267;
pub const ble_msg_idx_ble_evt_dfu_boot_idx: ble_msg_idx = 268;
pub type ble_msg_idx = ::std::os::raw::c_uint;
pub const ble_error_spaces_ble_errspc_bt: ble_error_spaces = 512;
pub const ble_error_spaces_ble_errspc_att: ble_error_spaces = 1024;
pub const ble_error_spaces_ble_errspc_bg: ble_error_spaces = 256;
pub const ble_error_spaces_ble_errspc_smp: ble_error_spaces = 768;
pub type ble_error_spaces = ::std::os::raw::c_uint;
pub const ble_error_ble_err_bt_error_success: ble_error = 512;
pub const ble_error_ble_err_bt_bt_error_authentication_failure: ble_error = 517;
pub const ble_error_ble_err_bt_pin_or_key_missing: ble_error = 518;
pub const ble_error_ble_err_bt_bt_error_memory_capacity_exceeded: ble_error = 519;
pub const ble_error_ble_err_bt_connection_timeout: ble_error = 520;
pub const ble_error_ble_err_bt_connection_limit_exceeded: ble_error = 521;
pub const ble_error_ble_err_bt_bt_error_command_disallowed: ble_error = 524;
pub const ble_error_ble_err_bt_bt_error_invalid_command_parameters: ble_error = 530;
pub const ble_error_ble_err_bt_bt_error_remote_user_terminated: ble_error = 531;
pub const ble_error_ble_err_bt_bt_error_connection_terminated_by_local_host: ble_error = 534;
pub const ble_error_ble_err_bt_bt_error_ll_response_timeout: ble_error = 546;
pub const ble_error_ble_err_bt_bt_error_ll_instant_passed: ble_error = 552;
pub const ble_error_ble_err_bt_bt_error_controller_busy: ble_error = 570;
pub const ble_error_ble_err_bt_bt_error_unacceptable_connection_interval: ble_error = 571;
pub const ble_error_ble_err_bt_bt_error_directed_advertising_timeout: ble_error = 572;
pub const ble_error_ble_err_bt_bt_error_connection_terminated_due_to_mic_failure: ble_error = 573;
pub const ble_error_ble_err_bt_bt_error_connection_failed_to_be_established: ble_error = 574;
pub const ble_error_ble_err_att_invalid_handle: ble_error = 1025;
pub const ble_error_ble_err_att_read_not_permitted: ble_error = 1026;
pub const ble_error_ble_err_att_write_not_permitted: ble_error = 1027;
pub const ble_error_ble_err_att_invalid_pdu: ble_error = 1028;
pub const ble_error_ble_err_att_insufficient_authentication: ble_error = 1029;
pub const ble_error_ble_err_att_request_not_supported: ble_error = 1030;
pub const ble_error_ble_err_att_invalid_offset: ble_error = 1031;
pub const ble_error_ble_err_att_insufficient_authorization: ble_error = 1032;
pub const ble_error_ble_err_att_prepare_queue_full: ble_error = 1033;
pub const ble_error_ble_err_att_att_not_found: ble_error = 1034;
pub const ble_error_ble_err_att_att_not_long: ble_error = 1035;
pub const ble_error_ble_err_att_insufficient_enc_key_size: ble_error = 1036;
pub const ble_error_ble_err_att_invalid_att_length: ble_error = 1037;
pub const ble_error_ble_err_att_unlikely_error: ble_error = 1038;
pub const ble_error_ble_err_att_insufficient_encryption: ble_error = 1039;
pub const ble_error_ble_err_att_unsupported_group_type: ble_error = 1040;
pub const ble_error_ble_err_att_insufficient_resources: ble_error = 1041;
pub const ble_error_ble_err_att_application: ble_error = 1152;
pub const ble_error_ble_err_success: ble_error = 0;
pub const ble_error_ble_err_invalid_param: ble_error = 384;
pub const ble_error_ble_err_wrong_state: ble_error = 385;
pub const ble_error_ble_err_out_of_memory: ble_error = 386;
pub const ble_error_ble_err_not_implemented: ble_error = 387;
pub const ble_error_ble_err_invalid_command: ble_error = 388;
pub const ble_error_ble_err_timeout: ble_error = 389;
pub const ble_error_ble_err_not_connected: ble_error = 390;
pub const ble_error_ble_err_flow: ble_error = 391;
pub const ble_error_ble_err_user_attribute: ble_error = 392;
pub const ble_error_ble_err_invalid_license_key: ble_error = 393;
pub const ble_error_ble_err_command_too_long: ble_error = 394;
pub const ble_error_ble_err_out_of_bonds: ble_error = 395;
pub const ble_error_ble_err_script_overflow: ble_error = 396;
pub const ble_error_ble_err_smp_passkey_entry_failed: ble_error = 769;
pub const ble_error_ble_err_smp_oob_not_available: ble_error = 770;
pub const ble_error_ble_err_smp_authentication_requirements: ble_error = 771;
pub const ble_error_ble_err_smp_confirm_value_failed: ble_error = 772;
pub const ble_error_ble_err_smp_pairing_not_supported: ble_error = 773;
pub const ble_error_ble_err_smp_encryption_key_size: ble_error = 774;
pub const ble_error_ble_err_smp_command_not_supported: ble_error = 775;
pub const ble_error_ble_err_smp_unspecified_reason: ble_error = 776;
pub const ble_error_ble_err_smp_repeated_attempts: ble_error = 777;
pub const ble_error_ble_err_smp_invalid_parameters: ble_error = 778;
pub const ble_error_ble_err_last: ble_error = 779;
pub type ble_error = ::std::os::raw::c_uint;
pub use self::ble_error as errorcode_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_reset_cmd_t {
    pub boot_in_dfu: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_reset_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_reset_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_reset_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_system_reset_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_reset_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_system_reset_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boot_in_dfu) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_reset_cmd_t),
            "::",
            stringify!(boot_in_dfu)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_address_get_rsp_t {
    pub address: bd_addr,
}
#[test]
fn bindgen_test_layout_ble_msg_system_address_get_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_address_get_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_address_get_rsp_t>(),
        6usize,
        concat!("Size of: ", stringify!(ble_msg_system_address_get_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_address_get_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_address_get_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_address_get_rsp_t),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_reg_write_cmd_t {
    pub address: uint16,
    pub value: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_reg_write_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_reg_write_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_reg_write_cmd_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_system_reg_write_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_reg_write_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_system_reg_write_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_reg_write_cmd_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_reg_write_cmd_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_reg_write_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_system_reg_write_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_reg_write_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_reg_write_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_system_reg_write_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_reg_write_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_system_reg_write_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_reg_write_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_reg_read_cmd_t {
    pub address: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_system_reg_read_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_reg_read_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_reg_read_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_system_reg_read_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_reg_read_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_system_reg_read_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_reg_read_cmd_t),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_reg_read_rsp_t {
    pub address: uint16,
    pub value: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_reg_read_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_reg_read_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_reg_read_rsp_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_system_reg_read_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_reg_read_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_system_reg_read_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_reg_read_rsp_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_reg_read_rsp_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_get_counters_rsp_t {
    pub txok: uint8,
    pub txretry: uint8,
    pub rxok: uint8,
    pub rxfail: uint8,
    pub mbuf: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_get_counters_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_get_counters_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_get_counters_rsp_t>(),
        5usize,
        concat!("Size of: ", stringify!(ble_msg_system_get_counters_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_get_counters_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_get_counters_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).txok) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_counters_rsp_t),
            "::",
            stringify!(txok)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).txretry) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_counters_rsp_t),
            "::",
            stringify!(txretry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rxok) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_counters_rsp_t),
            "::",
            stringify!(rxok)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rxfail) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_counters_rsp_t),
            "::",
            stringify!(rxfail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbuf) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_counters_rsp_t),
            "::",
            stringify!(mbuf)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_get_connections_rsp_t {
    pub maxconn: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_get_connections_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_get_connections_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_get_connections_rsp_t>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_system_get_connections_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_get_connections_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_get_connections_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxconn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_connections_rsp_t),
            "::",
            stringify!(maxconn)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_read_memory_cmd_t {
    pub address: uint32,
    pub length: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_read_memory_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_read_memory_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_read_memory_cmd_t>(),
        9usize,
        concat!("Size of: ", stringify!(ble_msg_system_read_memory_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_read_memory_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_read_memory_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_read_memory_cmd_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_read_memory_cmd_t),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_system_read_memory_rsp_t {
    pub address: uint32,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_system_read_memory_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_read_memory_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_read_memory_rsp_t>(),
        9usize,
        concat!("Size of: ", stringify!(ble_msg_system_read_memory_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_read_memory_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_read_memory_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_read_memory_rsp_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_read_memory_rsp_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_get_info_rsp_t {
    pub major: uint16,
    pub minor: uint16,
    pub patch: uint16,
    pub build: uint16,
    pub ll_version: uint16,
    pub protocol_version: uint8,
    pub hw: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_get_info_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_get_info_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_get_info_rsp_t>(),
        12usize,
        concat!("Size of: ", stringify!(ble_msg_system_get_info_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_get_info_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_system_get_info_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_info_rsp_t),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_info_rsp_t),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).patch) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_info_rsp_t),
            "::",
            stringify!(patch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).build) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_info_rsp_t),
            "::",
            stringify!(build)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_info_rsp_t),
            "::",
            stringify!(ll_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protocol_version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_info_rsp_t),
            "::",
            stringify!(protocol_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hw) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_info_rsp_t),
            "::",
            stringify!(hw)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_system_endpoint_tx_cmd_t {
    pub endpoint: uint8,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_system_endpoint_tx_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_endpoint_tx_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_endpoint_tx_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_system_endpoint_tx_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_endpoint_tx_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_endpoint_tx_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_tx_cmd_t),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_tx_cmd_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_endpoint_tx_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_system_endpoint_tx_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_endpoint_tx_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_endpoint_tx_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_system_endpoint_tx_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_endpoint_tx_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_endpoint_tx_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_tx_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_whitelist_append_cmd_t {
    pub address: bd_addr,
    pub address_type: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_whitelist_append_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_whitelist_append_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_whitelist_append_cmd_t>(),
        7usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_system_whitelist_append_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_whitelist_append_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_whitelist_append_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_whitelist_append_cmd_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address_type) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_whitelist_append_cmd_t),
            "::",
            stringify!(address_type)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_whitelist_append_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_system_whitelist_append_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_whitelist_append_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_whitelist_append_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_system_whitelist_append_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_whitelist_append_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_whitelist_append_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_whitelist_append_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_whitelist_remove_cmd_t {
    pub address: bd_addr,
    pub address_type: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_whitelist_remove_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_whitelist_remove_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_whitelist_remove_cmd_t>(),
        7usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_system_whitelist_remove_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_whitelist_remove_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_whitelist_remove_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_whitelist_remove_cmd_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address_type) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_whitelist_remove_cmd_t),
            "::",
            stringify!(address_type)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_whitelist_remove_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_system_whitelist_remove_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_whitelist_remove_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_whitelist_remove_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_system_whitelist_remove_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_whitelist_remove_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_whitelist_remove_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_whitelist_remove_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_endpoint_rx_cmd_t {
    pub endpoint: uint8,
    pub size: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_endpoint_rx_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_endpoint_rx_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_endpoint_rx_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_system_endpoint_rx_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_endpoint_rx_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_endpoint_rx_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_rx_cmd_t),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_rx_cmd_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_system_endpoint_rx_rsp_t {
    pub result: uint16,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_system_endpoint_rx_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_endpoint_rx_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_endpoint_rx_rsp_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_system_endpoint_rx_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_endpoint_rx_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_endpoint_rx_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_rx_rsp_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_rx_rsp_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_endpoint_set_watermarks_cmd_t {
    pub endpoint: uint8,
    pub rx: uint8,
    pub tx: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_endpoint_set_watermarks_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_endpoint_set_watermarks_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_endpoint_set_watermarks_cmd_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_system_endpoint_set_watermarks_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_endpoint_set_watermarks_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_endpoint_set_watermarks_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_set_watermarks_cmd_t),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_set_watermarks_cmd_t),
            "::",
            stringify!(rx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tx) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_set_watermarks_cmd_t),
            "::",
            stringify!(tx)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_endpoint_set_watermarks_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_system_endpoint_set_watermarks_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_endpoint_set_watermarks_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_endpoint_set_watermarks_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_system_endpoint_set_watermarks_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_endpoint_set_watermarks_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_endpoint_set_watermarks_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_set_watermarks_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_system_aes_setkey_cmd_t {
    pub key: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_system_aes_setkey_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_aes_setkey_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_aes_setkey_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_system_aes_setkey_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_aes_setkey_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_system_aes_setkey_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_aes_setkey_cmd_t),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_system_aes_encrypt_cmd_t {
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_system_aes_encrypt_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_aes_encrypt_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_aes_encrypt_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_system_aes_encrypt_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_aes_encrypt_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_aes_encrypt_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_aes_encrypt_cmd_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_system_aes_encrypt_rsp_t {
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_system_aes_encrypt_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_aes_encrypt_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_aes_encrypt_rsp_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_system_aes_encrypt_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_aes_encrypt_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_aes_encrypt_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_aes_encrypt_rsp_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_system_aes_decrypt_cmd_t {
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_system_aes_decrypt_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_aes_decrypt_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_aes_decrypt_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_system_aes_decrypt_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_aes_decrypt_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_aes_decrypt_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_aes_decrypt_cmd_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_system_aes_decrypt_rsp_t {
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_system_aes_decrypt_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_aes_decrypt_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_aes_decrypt_rsp_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_system_aes_decrypt_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_aes_decrypt_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_aes_decrypt_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_aes_decrypt_rsp_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_usb_enumeration_status_get_rsp_t {
    pub result: uint16,
    pub status: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_usb_enumeration_status_get_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_usb_enumeration_status_get_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_usb_enumeration_status_get_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_system_usb_enumeration_status_get_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_usb_enumeration_status_get_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_usb_enumeration_status_get_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_usb_enumeration_status_get_rsp_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_usb_enumeration_status_get_rsp_t),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_get_bootloader_crc_rsp_t {
    pub crc: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_system_get_bootloader_crc_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_get_bootloader_crc_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_get_bootloader_crc_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_system_get_bootloader_crc_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_get_bootloader_crc_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_get_bootloader_crc_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_get_bootloader_crc_rsp_t),
            "::",
            stringify!(crc)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_delay_reset_cmd_t {
    pub dfu: uint8,
    pub delay_ms: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_system_delay_reset_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_delay_reset_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_delay_reset_cmd_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_system_delay_reset_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_delay_reset_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_delay_reset_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfu) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_delay_reset_cmd_t),
            "::",
            stringify!(dfu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay_ms) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_delay_reset_cmd_t),
            "::",
            stringify!(delay_ms)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_boot_evt_t {
    pub major: uint16,
    pub minor: uint16,
    pub patch: uint16,
    pub build: uint16,
    pub ll_version: uint16,
    pub protocol_version: uint8,
    pub hw: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_boot_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_boot_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_boot_evt_t>(),
        12usize,
        concat!("Size of: ", stringify!(ble_msg_system_boot_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_boot_evt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_system_boot_evt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_boot_evt_t),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_boot_evt_t),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).patch) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_boot_evt_t),
            "::",
            stringify!(patch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).build) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_boot_evt_t),
            "::",
            stringify!(build)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_boot_evt_t),
            "::",
            stringify!(ll_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protocol_version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_boot_evt_t),
            "::",
            stringify!(protocol_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hw) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_boot_evt_t),
            "::",
            stringify!(hw)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_system_debug_evt_t {
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_system_debug_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_debug_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_debug_evt_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_system_debug_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_debug_evt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_system_debug_evt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_debug_evt_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_endpoint_watermark_rx_evt_t {
    pub endpoint: uint8,
    pub data: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_endpoint_watermark_rx_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_endpoint_watermark_rx_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_endpoint_watermark_rx_evt_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_system_endpoint_watermark_rx_evt_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_endpoint_watermark_rx_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_endpoint_watermark_rx_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_watermark_rx_evt_t),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_watermark_rx_evt_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_endpoint_watermark_tx_evt_t {
    pub endpoint: uint8,
    pub data: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_endpoint_watermark_tx_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_endpoint_watermark_tx_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_endpoint_watermark_tx_evt_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_system_endpoint_watermark_tx_evt_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_endpoint_watermark_tx_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_endpoint_watermark_tx_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_watermark_tx_evt_t),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_endpoint_watermark_tx_evt_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_script_failure_evt_t {
    pub address: uint16,
    pub reason: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_system_script_failure_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_script_failure_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_script_failure_evt_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_msg_system_script_failure_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_script_failure_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_script_failure_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_script_failure_evt_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reason) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_script_failure_evt_t),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_protocol_error_evt_t {
    pub reason: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_system_protocol_error_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_protocol_error_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_protocol_error_evt_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_system_protocol_error_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_protocol_error_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_protocol_error_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reason) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_protocol_error_evt_t),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_system_usb_enumerated_evt_t {
    pub state: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_system_usb_enumerated_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_system_usb_enumerated_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_system_usb_enumerated_evt_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_system_usb_enumerated_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_system_usb_enumerated_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_system_usb_enumerated_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_system_usb_enumerated_evt_t),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_flash_ps_save_cmd_t {
    pub key: uint16,
    pub value: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_flash_ps_save_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_flash_ps_save_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_flash_ps_save_cmd_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_flash_ps_save_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_flash_ps_save_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_flash_ps_save_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_ps_save_cmd_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_ps_save_cmd_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_flash_ps_save_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_flash_ps_save_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_flash_ps_save_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_flash_ps_save_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_flash_ps_save_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_flash_ps_save_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_flash_ps_save_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_ps_save_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_flash_ps_load_cmd_t {
    pub key: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_flash_ps_load_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_flash_ps_load_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_flash_ps_load_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_flash_ps_load_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_flash_ps_load_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_flash_ps_load_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_ps_load_cmd_t),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_flash_ps_load_rsp_t {
    pub result: uint16,
    pub value: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_flash_ps_load_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_flash_ps_load_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_flash_ps_load_rsp_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_flash_ps_load_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_flash_ps_load_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_flash_ps_load_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_ps_load_rsp_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_ps_load_rsp_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_flash_ps_erase_cmd_t {
    pub key: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_flash_ps_erase_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_flash_ps_erase_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_flash_ps_erase_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_flash_ps_erase_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_flash_ps_erase_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_flash_ps_erase_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_ps_erase_cmd_t),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_flash_erase_page_cmd_t {
    pub page: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_flash_erase_page_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_flash_erase_page_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_flash_erase_page_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_flash_erase_page_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_flash_erase_page_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_flash_erase_page_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_erase_page_cmd_t),
            "::",
            stringify!(page)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_flash_erase_page_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_flash_erase_page_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_flash_erase_page_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_flash_erase_page_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_flash_erase_page_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_flash_erase_page_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_flash_erase_page_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_erase_page_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_flash_write_data_cmd_t {
    pub address: uint32,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_flash_write_data_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_flash_write_data_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_flash_write_data_cmd_t>(),
        9usize,
        concat!("Size of: ", stringify!(ble_msg_flash_write_data_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_flash_write_data_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_flash_write_data_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_write_data_cmd_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_write_data_cmd_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_flash_write_data_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_flash_write_data_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_flash_write_data_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_flash_write_data_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_flash_write_data_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_flash_write_data_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_flash_write_data_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_write_data_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_flash_read_data_cmd_t {
    pub address: uint32,
    pub length: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_flash_read_data_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_flash_read_data_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_flash_read_data_cmd_t>(),
        9usize,
        concat!("Size of: ", stringify!(ble_msg_flash_read_data_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_flash_read_data_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_flash_read_data_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_read_data_cmd_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_read_data_cmd_t),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_flash_read_data_rsp_t {
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_flash_read_data_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_flash_read_data_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_flash_read_data_rsp_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_flash_read_data_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_flash_read_data_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_flash_read_data_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_read_data_rsp_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_flash_ps_key_evt_t {
    pub key: uint16,
    pub value: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_flash_ps_key_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_flash_ps_key_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_flash_ps_key_evt_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_flash_ps_key_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_flash_ps_key_evt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_flash_ps_key_evt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_ps_key_evt_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_flash_ps_key_evt_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attributes_write_cmd_t {
    pub handle: uint16,
    pub offset: uint8,
    pub value: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attributes_write_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attributes_write_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attributes_write_cmd_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_msg_attributes_write_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attributes_write_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_attributes_write_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_write_cmd_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_write_cmd_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_write_cmd_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attributes_write_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attributes_write_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attributes_write_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attributes_write_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_attributes_write_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attributes_write_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_attributes_write_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_write_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attributes_read_cmd_t {
    pub handle: uint16,
    pub offset: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attributes_read_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attributes_read_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attributes_read_cmd_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_msg_attributes_read_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attributes_read_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_attributes_read_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_read_cmd_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_read_cmd_t),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attributes_read_rsp_t {
    pub handle: uint16,
    pub offset: uint16,
    pub result: uint16,
    pub value: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attributes_read_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attributes_read_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attributes_read_rsp_t>(),
        7usize,
        concat!("Size of: ", stringify!(ble_msg_attributes_read_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attributes_read_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_attributes_read_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_read_rsp_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_read_rsp_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_read_rsp_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_read_rsp_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attributes_read_type_cmd_t {
    pub handle: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attributes_read_type_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attributes_read_type_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attributes_read_type_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_attributes_read_type_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attributes_read_type_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attributes_read_type_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_read_type_cmd_t),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attributes_read_type_rsp_t {
    pub handle: uint16,
    pub result: uint16,
    pub value: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attributes_read_type_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attributes_read_type_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attributes_read_type_rsp_t>(),
        5usize,
        concat!("Size of: ", stringify!(ble_msg_attributes_read_type_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attributes_read_type_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attributes_read_type_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_read_type_rsp_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_read_type_rsp_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_read_type_rsp_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attributes_user_read_response_cmd_t {
    pub connection: uint8,
    pub att_error: uint8,
    pub value: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attributes_user_read_response_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attributes_user_read_response_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attributes_user_read_response_cmd_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attributes_user_read_response_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attributes_user_read_response_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attributes_user_read_response_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_user_read_response_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).att_error) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_user_read_response_cmd_t),
            "::",
            stringify!(att_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_user_read_response_cmd_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attributes_user_write_response_cmd_t {
    pub connection: uint8,
    pub att_error: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_attributes_user_write_response_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attributes_user_write_response_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attributes_user_write_response_cmd_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attributes_user_write_response_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attributes_user_write_response_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attributes_user_write_response_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_user_write_response_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).att_error) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_user_write_response_cmd_t),
            "::",
            stringify!(att_error)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attributes_send_cmd_t {
    pub connection: uint8,
    pub handle: uint16,
    pub value: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attributes_send_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attributes_send_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attributes_send_cmd_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_msg_attributes_send_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attributes_send_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_attributes_send_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_send_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_send_cmd_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_send_cmd_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attributes_send_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attributes_send_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attributes_send_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attributes_send_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_attributes_send_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attributes_send_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_attributes_send_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_send_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attributes_value_evt_t {
    pub connection: uint8,
    pub reason: uint8,
    pub handle: uint16,
    pub offset: uint16,
    pub value: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attributes_value_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attributes_value_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attributes_value_evt_t>(),
        7usize,
        concat!("Size of: ", stringify!(ble_msg_attributes_value_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attributes_value_evt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_attributes_value_evt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_value_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reason) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_value_evt_t),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_value_evt_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_value_evt_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_value_evt_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attributes_user_read_request_evt_t {
    pub connection: uint8,
    pub handle: uint16,
    pub offset: uint16,
    pub maxsize: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_attributes_user_read_request_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attributes_user_read_request_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attributes_user_read_request_evt_t>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attributes_user_read_request_evt_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attributes_user_read_request_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attributes_user_read_request_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_user_read_request_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_user_read_request_evt_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_user_read_request_evt_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxsize) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_user_read_request_evt_t),
            "::",
            stringify!(maxsize)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attributes_status_evt_t {
    pub handle: uint16,
    pub flags: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_attributes_status_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attributes_status_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attributes_status_evt_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_attributes_status_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attributes_status_evt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_attributes_status_evt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_status_evt_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attributes_status_evt_t),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_disconnect_cmd_t {
    pub connection: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_disconnect_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_disconnect_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_disconnect_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_connection_disconnect_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_disconnect_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_disconnect_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_disconnect_cmd_t),
            "::",
            stringify!(connection)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_disconnect_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_disconnect_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_disconnect_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_disconnect_rsp_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_connection_disconnect_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_disconnect_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_disconnect_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_disconnect_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_disconnect_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_get_rssi_cmd_t {
    pub connection: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_get_rssi_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_get_rssi_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_get_rssi_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_connection_get_rssi_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_get_rssi_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_get_rssi_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_get_rssi_cmd_t),
            "::",
            stringify!(connection)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_get_rssi_rsp_t {
    pub connection: uint8,
    pub rssi: int8,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_get_rssi_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_get_rssi_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_get_rssi_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_connection_get_rssi_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_get_rssi_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_get_rssi_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_get_rssi_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rssi) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_get_rssi_rsp_t),
            "::",
            stringify!(rssi)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_update_cmd_t {
    pub connection: uint8,
    pub interval_min: uint16,
    pub interval_max: uint16,
    pub latency: uint16,
    pub timeout: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_update_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_update_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_update_cmd_t>(),
        9usize,
        concat!("Size of: ", stringify!(ble_msg_connection_update_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_update_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_connection_update_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_update_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval_min) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_update_cmd_t),
            "::",
            stringify!(interval_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval_max) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_update_cmd_t),
            "::",
            stringify!(interval_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latency) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_update_cmd_t),
            "::",
            stringify!(latency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_update_cmd_t),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_update_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_update_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_update_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_update_rsp_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_connection_update_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_update_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_connection_update_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_update_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_update_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_version_update_cmd_t {
    pub connection: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_version_update_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_version_update_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_version_update_cmd_t>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_connection_version_update_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_version_update_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_version_update_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_version_update_cmd_t),
            "::",
            stringify!(connection)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_version_update_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_version_update_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_version_update_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_version_update_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_connection_version_update_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_version_update_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_version_update_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_version_update_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_version_update_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_channel_map_get_cmd_t {
    pub connection: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_channel_map_get_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_channel_map_get_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_channel_map_get_cmd_t>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_connection_channel_map_get_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_channel_map_get_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_channel_map_get_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_channel_map_get_cmd_t),
            "::",
            stringify!(connection)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_connection_channel_map_get_rsp_t {
    pub connection: uint8,
    pub map: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_channel_map_get_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_channel_map_get_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_channel_map_get_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_connection_channel_map_get_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_channel_map_get_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_channel_map_get_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_channel_map_get_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_channel_map_get_rsp_t),
            "::",
            stringify!(map)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_connection_channel_map_set_cmd_t {
    pub connection: uint8,
    pub map: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_channel_map_set_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_channel_map_set_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_channel_map_set_cmd_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_connection_channel_map_set_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_channel_map_set_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_channel_map_set_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_channel_map_set_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_channel_map_set_cmd_t),
            "::",
            stringify!(map)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_channel_map_set_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_channel_map_set_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_channel_map_set_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_channel_map_set_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_connection_channel_map_set_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_channel_map_set_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_channel_map_set_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_channel_map_set_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_channel_map_set_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_features_get_cmd_t {
    pub connection: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_features_get_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_features_get_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_features_get_cmd_t>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_connection_features_get_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_features_get_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_features_get_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_features_get_cmd_t),
            "::",
            stringify!(connection)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_features_get_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_features_get_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_features_get_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_features_get_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_connection_features_get_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_features_get_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_features_get_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_features_get_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_features_get_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_get_status_cmd_t {
    pub connection: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_get_status_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_get_status_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_get_status_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_connection_get_status_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_get_status_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_get_status_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_get_status_cmd_t),
            "::",
            stringify!(connection)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_get_status_rsp_t {
    pub connection: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_get_status_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_get_status_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_get_status_rsp_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_connection_get_status_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_get_status_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_get_status_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_get_status_rsp_t),
            "::",
            stringify!(connection)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_connection_raw_tx_cmd_t {
    pub connection: uint8,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_raw_tx_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_raw_tx_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_raw_tx_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_connection_raw_tx_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_raw_tx_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_connection_raw_tx_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_raw_tx_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_raw_tx_cmd_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_raw_tx_rsp_t {
    pub connection: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_raw_tx_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_raw_tx_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_raw_tx_rsp_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_connection_raw_tx_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_raw_tx_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_connection_raw_tx_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_raw_tx_rsp_t),
            "::",
            stringify!(connection)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_slave_latency_disable_cmd_t {
    pub disable: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_slave_latency_disable_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_slave_latency_disable_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_slave_latency_disable_cmd_t>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_connection_slave_latency_disable_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_slave_latency_disable_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_slave_latency_disable_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_slave_latency_disable_cmd_t),
            "::",
            stringify!(disable)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_slave_latency_disable_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_slave_latency_disable_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_slave_latency_disable_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_slave_latency_disable_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_connection_slave_latency_disable_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_slave_latency_disable_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_slave_latency_disable_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_slave_latency_disable_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_status_evt_t {
    pub connection: uint8,
    pub flags: uint8,
    pub address: bd_addr,
    pub address_type: uint8,
    pub conn_interval: uint16,
    pub timeout: uint16,
    pub latency: uint16,
    pub bonding: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_status_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_status_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_status_evt_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_msg_connection_status_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_status_evt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_connection_status_evt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_status_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_status_evt_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_status_evt_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_status_evt_t),
            "::",
            stringify!(address_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn_interval) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_status_evt_t),
            "::",
            stringify!(conn_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_status_evt_t),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latency) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_status_evt_t),
            "::",
            stringify!(latency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bonding) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_status_evt_t),
            "::",
            stringify!(bonding)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_version_ind_evt_t {
    pub connection: uint8,
    pub vers_nr: uint8,
    pub comp_id: uint16,
    pub sub_vers_nr: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_version_ind_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_version_ind_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_version_ind_evt_t>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_connection_version_ind_evt_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_version_ind_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_version_ind_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_version_ind_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vers_nr) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_version_ind_evt_t),
            "::",
            stringify!(vers_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_id) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_version_ind_evt_t),
            "::",
            stringify!(comp_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub_vers_nr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_version_ind_evt_t),
            "::",
            stringify!(sub_vers_nr)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_connection_feature_ind_evt_t {
    pub connection: uint8,
    pub features: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_feature_ind_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_feature_ind_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_feature_ind_evt_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_connection_feature_ind_evt_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_feature_ind_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_feature_ind_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_feature_ind_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_feature_ind_evt_t),
            "::",
            stringify!(features)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_connection_raw_rx_evt_t {
    pub connection: uint8,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_raw_rx_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_raw_rx_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_raw_rx_evt_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_connection_raw_rx_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_raw_rx_evt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_connection_raw_rx_evt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_raw_rx_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_raw_rx_evt_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_connection_disconnected_evt_t {
    pub connection: uint8,
    pub reason: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_connection_disconnected_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_connection_disconnected_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_connection_disconnected_evt_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_connection_disconnected_evt_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_connection_disconnected_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_connection_disconnected_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_disconnected_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reason) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_connection_disconnected_evt_t),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attclient_find_by_type_value_cmd_t {
    pub connection: uint8,
    pub start: uint16,
    pub end: uint16,
    pub uuid: uint16,
    pub value: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_find_by_type_value_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_find_by_type_value_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_find_by_type_value_cmd_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_find_by_type_value_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_find_by_type_value_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_find_by_type_value_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_by_type_value_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_by_type_value_cmd_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_by_type_value_cmd_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_by_type_value_cmd_t),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_by_type_value_cmd_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_find_by_type_value_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_find_by_type_value_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_find_by_type_value_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_find_by_type_value_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_find_by_type_value_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_find_by_type_value_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_find_by_type_value_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_by_type_value_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_by_type_value_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attclient_read_by_group_type_cmd_t {
    pub connection: uint8,
    pub start: uint16,
    pub end: uint16,
    pub uuid: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_read_by_group_type_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_read_by_group_type_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_read_by_group_type_cmd_t>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_read_by_group_type_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_read_by_group_type_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_read_by_group_type_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_group_type_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_group_type_cmd_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_group_type_cmd_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_group_type_cmd_t),
            "::",
            stringify!(uuid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_read_by_group_type_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_read_by_group_type_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_read_by_group_type_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_read_by_group_type_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_read_by_group_type_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_read_by_group_type_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_read_by_group_type_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_group_type_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_group_type_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attclient_read_by_type_cmd_t {
    pub connection: uint8,
    pub start: uint16,
    pub end: uint16,
    pub uuid: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_read_by_type_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_read_by_type_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_read_by_type_cmd_t>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_read_by_type_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_read_by_type_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_read_by_type_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_type_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_type_cmd_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_type_cmd_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_type_cmd_t),
            "::",
            stringify!(uuid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_read_by_type_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_read_by_type_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_read_by_type_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_read_by_type_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_read_by_type_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_read_by_type_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_read_by_type_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_type_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_type_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_find_information_cmd_t {
    pub connection: uint8,
    pub start: uint16,
    pub end: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_find_information_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_find_information_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_find_information_cmd_t>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_find_information_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_find_information_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_find_information_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_information_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_information_cmd_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_information_cmd_t),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_find_information_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_find_information_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_find_information_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_find_information_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_find_information_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_find_information_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_find_information_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_information_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_information_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_read_by_handle_cmd_t {
    pub connection: uint8,
    pub chrhandle: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_read_by_handle_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_read_by_handle_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_read_by_handle_cmd_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_read_by_handle_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_read_by_handle_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_read_by_handle_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_handle_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chrhandle) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_handle_cmd_t),
            "::",
            stringify!(chrhandle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_read_by_handle_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_read_by_handle_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_read_by_handle_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_read_by_handle_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_read_by_handle_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_read_by_handle_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_read_by_handle_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_handle_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_by_handle_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attclient_attribute_write_cmd_t {
    pub connection: uint8,
    pub atthandle: uint16,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_attribute_write_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_attribute_write_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_attribute_write_cmd_t>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_attribute_write_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_attribute_write_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_attribute_write_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_write_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atthandle) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_write_cmd_t),
            "::",
            stringify!(atthandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_write_cmd_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_attribute_write_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_attribute_write_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_attribute_write_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_attribute_write_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_attribute_write_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_attribute_write_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_attribute_write_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_write_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_write_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attclient_write_command_cmd_t {
    pub connection: uint8,
    pub atthandle: uint16,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_write_command_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_write_command_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_write_command_cmd_t>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_write_command_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_write_command_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_write_command_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_write_command_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atthandle) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_write_command_cmd_t),
            "::",
            stringify!(atthandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_write_command_cmd_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_write_command_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_write_command_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_write_command_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_write_command_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_write_command_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_write_command_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_write_command_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_write_command_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_write_command_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_indicate_confirm_cmd_t {
    pub connection: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_indicate_confirm_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_indicate_confirm_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_indicate_confirm_cmd_t>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_indicate_confirm_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_indicate_confirm_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_indicate_confirm_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_indicate_confirm_cmd_t),
            "::",
            stringify!(connection)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_indicate_confirm_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_indicate_confirm_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_indicate_confirm_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_indicate_confirm_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_indicate_confirm_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_indicate_confirm_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_indicate_confirm_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_indicate_confirm_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_read_long_cmd_t {
    pub connection: uint8,
    pub chrhandle: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_read_long_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_read_long_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_read_long_cmd_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_attclient_read_long_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_read_long_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_read_long_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_long_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chrhandle) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_long_cmd_t),
            "::",
            stringify!(chrhandle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_read_long_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_read_long_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_read_long_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_read_long_rsp_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_attclient_read_long_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_read_long_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_read_long_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_long_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_long_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attclient_prepare_write_cmd_t {
    pub connection: uint8,
    pub atthandle: uint16,
    pub offset: uint16,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_prepare_write_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_prepare_write_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_prepare_write_cmd_t>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_prepare_write_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_prepare_write_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_prepare_write_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_prepare_write_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atthandle) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_prepare_write_cmd_t),
            "::",
            stringify!(atthandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_prepare_write_cmd_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_prepare_write_cmd_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_prepare_write_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_prepare_write_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_prepare_write_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_prepare_write_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_prepare_write_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_prepare_write_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_prepare_write_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_prepare_write_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_prepare_write_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_execute_write_cmd_t {
    pub connection: uint8,
    pub commit: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_execute_write_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_execute_write_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_execute_write_cmd_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_execute_write_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_execute_write_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_execute_write_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_execute_write_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commit) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_execute_write_cmd_t),
            "::",
            stringify!(commit)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_execute_write_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_execute_write_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_execute_write_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_execute_write_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_execute_write_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_execute_write_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_execute_write_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_execute_write_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_execute_write_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attclient_read_multiple_cmd_t {
    pub connection: uint8,
    pub handles: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_read_multiple_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_read_multiple_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_read_multiple_cmd_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_read_multiple_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_read_multiple_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_read_multiple_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_multiple_cmd_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handles) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_multiple_cmd_t),
            "::",
            stringify!(handles)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_read_multiple_rsp_t {
    pub connection: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_read_multiple_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_read_multiple_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_read_multiple_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_read_multiple_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_read_multiple_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_read_multiple_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_multiple_rsp_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_multiple_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_indicated_evt_t {
    pub connection: uint8,
    pub attrhandle: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_indicated_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_indicated_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_indicated_evt_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_attclient_indicated_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_indicated_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_indicated_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_indicated_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrhandle) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_indicated_evt_t),
            "::",
            stringify!(attrhandle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_attclient_procedure_completed_evt_t {
    pub connection: uint8,
    pub result: uint16,
    pub chrhandle: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_procedure_completed_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_procedure_completed_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_procedure_completed_evt_t>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_procedure_completed_evt_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_procedure_completed_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_procedure_completed_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_procedure_completed_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_procedure_completed_evt_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chrhandle) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_procedure_completed_evt_t),
            "::",
            stringify!(chrhandle)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attclient_group_found_evt_t {
    pub connection: uint8,
    pub start: uint16,
    pub end: uint16,
    pub uuid: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_group_found_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_group_found_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_group_found_evt_t>(),
        6usize,
        concat!("Size of: ", stringify!(ble_msg_attclient_group_found_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_group_found_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_group_found_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_group_found_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_group_found_evt_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_group_found_evt_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_group_found_evt_t),
            "::",
            stringify!(uuid)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attclient_attribute_found_evt_t {
    pub connection: uint8,
    pub chrdecl: uint16,
    pub value: uint16,
    pub properties: uint8,
    pub uuid: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_attribute_found_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_attribute_found_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_attribute_found_evt_t>(),
        7usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_attribute_found_evt_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_attribute_found_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_attribute_found_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_found_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chrdecl) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_found_evt_t),
            "::",
            stringify!(chrdecl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_found_evt_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_found_evt_t),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_found_evt_t),
            "::",
            stringify!(uuid)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attclient_find_information_found_evt_t {
    pub connection: uint8,
    pub chrhandle: uint16,
    pub uuid: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_find_information_found_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_find_information_found_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_find_information_found_evt_t>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_find_information_found_evt_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_find_information_found_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_find_information_found_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_information_found_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chrhandle) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_information_found_evt_t),
            "::",
            stringify!(chrhandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_find_information_found_evt_t),
            "::",
            stringify!(uuid)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attclient_attribute_value_evt_t {
    pub connection: uint8,
    pub atthandle: uint16,
    pub type_: uint8,
    pub value: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_attribute_value_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_attribute_value_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_attribute_value_evt_t>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_attribute_value_evt_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_attribute_value_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_attribute_value_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_value_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atthandle) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_value_evt_t),
            "::",
            stringify!(atthandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_value_evt_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_attribute_value_evt_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_attclient_read_multiple_response_evt_t {
    pub connection: uint8,
    pub handles: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_attclient_read_multiple_response_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_attclient_read_multiple_response_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_attclient_read_multiple_response_evt_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_attclient_read_multiple_response_evt_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_attclient_read_multiple_response_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_attclient_read_multiple_response_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_multiple_response_evt_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handles) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_attclient_read_multiple_response_evt_t),
            "::",
            stringify!(handles)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_encrypt_start_cmd_t {
    pub handle: uint8,
    pub bonding: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_encrypt_start_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_encrypt_start_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_encrypt_start_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_sm_encrypt_start_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_encrypt_start_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_sm_encrypt_start_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_encrypt_start_cmd_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bonding) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_encrypt_start_cmd_t),
            "::",
            stringify!(bonding)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_encrypt_start_rsp_t {
    pub handle: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_encrypt_start_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_encrypt_start_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_encrypt_start_rsp_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_sm_encrypt_start_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_encrypt_start_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_sm_encrypt_start_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_encrypt_start_rsp_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_encrypt_start_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_set_bondable_mode_cmd_t {
    pub bondable: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_set_bondable_mode_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_set_bondable_mode_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_set_bondable_mode_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_sm_set_bondable_mode_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_set_bondable_mode_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_sm_set_bondable_mode_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bondable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_set_bondable_mode_cmd_t),
            "::",
            stringify!(bondable)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_delete_bonding_cmd_t {
    pub handle: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_delete_bonding_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_delete_bonding_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_delete_bonding_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_sm_delete_bonding_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_delete_bonding_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_sm_delete_bonding_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_delete_bonding_cmd_t),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_delete_bonding_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_delete_bonding_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_delete_bonding_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_delete_bonding_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_sm_delete_bonding_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_delete_bonding_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_sm_delete_bonding_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_delete_bonding_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_set_parameters_cmd_t {
    pub mitm: uint8,
    pub min_key_size: uint8,
    pub io_capabilities: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_set_parameters_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_set_parameters_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_set_parameters_cmd_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_sm_set_parameters_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_set_parameters_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_sm_set_parameters_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mitm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_set_parameters_cmd_t),
            "::",
            stringify!(mitm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_key_size) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_set_parameters_cmd_t),
            "::",
            stringify!(min_key_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_capabilities) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_set_parameters_cmd_t),
            "::",
            stringify!(io_capabilities)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_passkey_entry_cmd_t {
    pub handle: uint8,
    pub passkey: uint32,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_passkey_entry_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_passkey_entry_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_passkey_entry_cmd_t>(),
        9usize,
        concat!("Size of: ", stringify!(ble_msg_sm_passkey_entry_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_passkey_entry_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_sm_passkey_entry_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_passkey_entry_cmd_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passkey) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_passkey_entry_cmd_t),
            "::",
            stringify!(passkey)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_passkey_entry_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_passkey_entry_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_passkey_entry_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_passkey_entry_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_sm_passkey_entry_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_passkey_entry_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_sm_passkey_entry_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_passkey_entry_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_get_bonds_rsp_t {
    pub bonds: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_get_bonds_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_get_bonds_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_get_bonds_rsp_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_sm_get_bonds_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_get_bonds_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_sm_get_bonds_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bonds) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_get_bonds_rsp_t),
            "::",
            stringify!(bonds)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_sm_set_oob_data_cmd_t {
    pub oob: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_set_oob_data_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_set_oob_data_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_set_oob_data_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_sm_set_oob_data_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_set_oob_data_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_sm_set_oob_data_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oob) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_set_oob_data_cmd_t),
            "::",
            stringify!(oob)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_whitelist_bonds_rsp_t {
    pub result: uint16,
    pub count: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_whitelist_bonds_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_whitelist_bonds_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_whitelist_bonds_rsp_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_sm_whitelist_bonds_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_whitelist_bonds_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_sm_whitelist_bonds_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_whitelist_bonds_rsp_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_whitelist_bonds_rsp_t),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_set_pairing_distribution_keys_cmd_t {
    pub initiator_keys: uint8,
    pub responder_keys: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_set_pairing_distribution_keys_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_set_pairing_distribution_keys_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_set_pairing_distribution_keys_cmd_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_sm_set_pairing_distribution_keys_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_set_pairing_distribution_keys_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_sm_set_pairing_distribution_keys_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initiator_keys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_set_pairing_distribution_keys_cmd_t),
            "::",
            stringify!(initiator_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).responder_keys) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_set_pairing_distribution_keys_cmd_t),
            "::",
            stringify!(responder_keys)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_set_pairing_distribution_keys_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_set_pairing_distribution_keys_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_set_pairing_distribution_keys_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_set_pairing_distribution_keys_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_sm_set_pairing_distribution_keys_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_set_pairing_distribution_keys_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_sm_set_pairing_distribution_keys_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_set_pairing_distribution_keys_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_sm_smp_data_evt_t {
    pub handle: uint8,
    pub packet: uint8,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_smp_data_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_smp_data_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_smp_data_evt_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_sm_smp_data_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_smp_data_evt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_sm_smp_data_evt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_smp_data_evt_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_smp_data_evt_t),
            "::",
            stringify!(packet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_smp_data_evt_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_bonding_fail_evt_t {
    pub handle: uint8,
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_bonding_fail_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_bonding_fail_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_bonding_fail_evt_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_sm_bonding_fail_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_bonding_fail_evt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_sm_bonding_fail_evt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_bonding_fail_evt_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_bonding_fail_evt_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_passkey_display_evt_t {
    pub handle: uint8,
    pub passkey: uint32,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_passkey_display_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_passkey_display_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_passkey_display_evt_t>(),
        9usize,
        concat!("Size of: ", stringify!(ble_msg_sm_passkey_display_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_passkey_display_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_sm_passkey_display_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_passkey_display_evt_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passkey) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_passkey_display_evt_t),
            "::",
            stringify!(passkey)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_passkey_request_evt_t {
    pub handle: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_passkey_request_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_passkey_request_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_passkey_request_evt_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_sm_passkey_request_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_passkey_request_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_sm_passkey_request_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_passkey_request_evt_t),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_sm_bond_status_evt_t {
    pub bond: uint8,
    pub keysize: uint8,
    pub mitm: uint8,
    pub keys: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_sm_bond_status_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_sm_bond_status_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_sm_bond_status_evt_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_msg_sm_bond_status_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_sm_bond_status_evt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_sm_bond_status_evt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bond) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_bond_status_evt_t),
            "::",
            stringify!(bond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keysize) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_bond_status_evt_t),
            "::",
            stringify!(keysize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mitm) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_bond_status_evt_t),
            "::",
            stringify!(mitm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keys) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_sm_bond_status_evt_t),
            "::",
            stringify!(keys)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_privacy_flags_cmd_t {
    pub peripheral_privacy: uint8,
    pub central_privacy: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_privacy_flags_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_privacy_flags_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_privacy_flags_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_gap_set_privacy_flags_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_privacy_flags_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_set_privacy_flags_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peripheral_privacy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_privacy_flags_cmd_t),
            "::",
            stringify!(peripheral_privacy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).central_privacy) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_privacy_flags_cmd_t),
            "::",
            stringify!(central_privacy)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_mode_cmd_t {
    pub discover: uint8,
    pub connect: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_mode_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_mode_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_mode_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_gap_set_mode_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_mode_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_gap_set_mode_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).discover) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_mode_cmd_t),
            "::",
            stringify!(discover)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connect) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_mode_cmd_t),
            "::",
            stringify!(connect)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_mode_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_mode_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_mode_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_mode_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_gap_set_mode_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_mode_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_gap_set_mode_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_mode_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_discover_cmd_t {
    pub mode: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_discover_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_discover_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_discover_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_gap_discover_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_discover_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_gap_discover_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_discover_cmd_t),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_discover_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_discover_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_discover_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_discover_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_gap_discover_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_discover_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_gap_discover_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_discover_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_connect_direct_cmd_t {
    pub address: bd_addr,
    pub addr_type: uint8,
    pub conn_interval_min: uint16,
    pub conn_interval_max: uint16,
    pub timeout: uint16,
    pub latency: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_connect_direct_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_connect_direct_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_connect_direct_cmd_t>(),
        15usize,
        concat!("Size of: ", stringify!(ble_msg_gap_connect_direct_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_connect_direct_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_connect_direct_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_direct_cmd_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_type) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_direct_cmd_t),
            "::",
            stringify!(addr_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn_interval_min) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_direct_cmd_t),
            "::",
            stringify!(conn_interval_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn_interval_max) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_direct_cmd_t),
            "::",
            stringify!(conn_interval_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_direct_cmd_t),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latency) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_direct_cmd_t),
            "::",
            stringify!(latency)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_connect_direct_rsp_t {
    pub result: uint16,
    pub connection_handle: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_connect_direct_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_connect_direct_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_connect_direct_rsp_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_gap_connect_direct_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_connect_direct_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_connect_direct_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_direct_rsp_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_handle) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_direct_rsp_t),
            "::",
            stringify!(connection_handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_end_procedure_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_end_procedure_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_end_procedure_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_end_procedure_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_gap_end_procedure_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_end_procedure_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_gap_end_procedure_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_end_procedure_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_connect_selective_cmd_t {
    pub conn_interval_min: uint16,
    pub conn_interval_max: uint16,
    pub timeout: uint16,
    pub latency: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_connect_selective_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_connect_selective_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_connect_selective_cmd_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_msg_gap_connect_selective_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_connect_selective_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_connect_selective_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn_interval_min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_selective_cmd_t),
            "::",
            stringify!(conn_interval_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn_interval_max) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_selective_cmd_t),
            "::",
            stringify!(conn_interval_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_selective_cmd_t),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latency) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_selective_cmd_t),
            "::",
            stringify!(latency)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_connect_selective_rsp_t {
    pub result: uint16,
    pub connection_handle: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_connect_selective_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_connect_selective_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_connect_selective_rsp_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_gap_connect_selective_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_connect_selective_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_connect_selective_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_selective_rsp_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_handle) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_connect_selective_rsp_t),
            "::",
            stringify!(connection_handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_filtering_cmd_t {
    pub scan_policy: uint8,
    pub adv_policy: uint8,
    pub scan_duplicate_filtering: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_filtering_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_filtering_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_filtering_cmd_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_gap_set_filtering_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_filtering_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_gap_set_filtering_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scan_policy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_filtering_cmd_t),
            "::",
            stringify!(scan_policy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adv_policy) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_filtering_cmd_t),
            "::",
            stringify!(adv_policy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scan_duplicate_filtering) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_filtering_cmd_t),
            "::",
            stringify!(scan_duplicate_filtering)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_filtering_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_filtering_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_filtering_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_filtering_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_gap_set_filtering_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_filtering_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_gap_set_filtering_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_filtering_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_scan_parameters_cmd_t {
    pub scan_interval: uint16,
    pub scan_window: uint16,
    pub active: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_scan_parameters_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_scan_parameters_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_scan_parameters_cmd_t>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_gap_set_scan_parameters_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_scan_parameters_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_set_scan_parameters_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scan_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_scan_parameters_cmd_t),
            "::",
            stringify!(scan_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scan_window) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_scan_parameters_cmd_t),
            "::",
            stringify!(scan_window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_scan_parameters_cmd_t),
            "::",
            stringify!(active)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_scan_parameters_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_scan_parameters_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_scan_parameters_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_scan_parameters_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_gap_set_scan_parameters_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_scan_parameters_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_set_scan_parameters_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_scan_parameters_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_adv_parameters_cmd_t {
    pub adv_interval_min: uint16,
    pub adv_interval_max: uint16,
    pub adv_channels: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_adv_parameters_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_adv_parameters_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_adv_parameters_cmd_t>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_gap_set_adv_parameters_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_adv_parameters_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_set_adv_parameters_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adv_interval_min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_adv_parameters_cmd_t),
            "::",
            stringify!(adv_interval_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adv_interval_max) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_adv_parameters_cmd_t),
            "::",
            stringify!(adv_interval_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adv_channels) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_adv_parameters_cmd_t),
            "::",
            stringify!(adv_channels)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_adv_parameters_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_adv_parameters_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_adv_parameters_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_adv_parameters_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_gap_set_adv_parameters_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_adv_parameters_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_set_adv_parameters_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_adv_parameters_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_gap_set_adv_data_cmd_t {
    pub set_scanrsp: uint8,
    pub adv_data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_adv_data_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_adv_data_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_adv_data_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_gap_set_adv_data_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_adv_data_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_gap_set_adv_data_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_scanrsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_adv_data_cmd_t),
            "::",
            stringify!(set_scanrsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adv_data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_adv_data_cmd_t),
            "::",
            stringify!(adv_data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_adv_data_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_adv_data_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_adv_data_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_adv_data_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_gap_set_adv_data_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_adv_data_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_gap_set_adv_data_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_adv_data_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_directed_connectable_mode_cmd_t {
    pub address: bd_addr,
    pub addr_type: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_directed_connectable_mode_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_directed_connectable_mode_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_directed_connectable_mode_cmd_t>(),
        7usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_gap_set_directed_connectable_mode_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_directed_connectable_mode_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_set_directed_connectable_mode_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_directed_connectable_mode_cmd_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_type) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_directed_connectable_mode_cmd_t),
            "::",
            stringify!(addr_type)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_directed_connectable_mode_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_directed_connectable_mode_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_directed_connectable_mode_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_directed_connectable_mode_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_gap_set_directed_connectable_mode_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_directed_connectable_mode_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_set_directed_connectable_mode_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_directed_connectable_mode_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_initiating_con_parameters_cmd_t {
    pub scan_interval: uint16,
    pub scan_window: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_initiating_con_parameters_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_initiating_con_parameters_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_initiating_con_parameters_cmd_t>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_gap_set_initiating_con_parameters_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_initiating_con_parameters_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_set_initiating_con_parameters_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scan_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_initiating_con_parameters_cmd_t),
            "::",
            stringify!(scan_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scan_window) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_initiating_con_parameters_cmd_t),
            "::",
            stringify!(scan_window)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_initiating_con_parameters_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_initiating_con_parameters_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_initiating_con_parameters_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_initiating_con_parameters_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_gap_set_initiating_con_parameters_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_initiating_con_parameters_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_set_initiating_con_parameters_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_initiating_con_parameters_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_nonresolvable_address_cmd_t {
    pub address: bd_addr,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_nonresolvable_address_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_nonresolvable_address_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_nonresolvable_address_cmd_t>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_gap_set_nonresolvable_address_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_nonresolvable_address_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_set_nonresolvable_address_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_nonresolvable_address_cmd_t),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_set_nonresolvable_address_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_set_nonresolvable_address_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_set_nonresolvable_address_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_set_nonresolvable_address_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_gap_set_nonresolvable_address_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_set_nonresolvable_address_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_gap_set_nonresolvable_address_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_set_nonresolvable_address_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_gap_scan_response_evt_t {
    pub rssi: int8,
    pub packet_type: uint8,
    pub sender: bd_addr,
    pub address_type: uint8,
    pub bond: uint8,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_scan_response_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_scan_response_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_scan_response_evt_t>(),
        11usize,
        concat!("Size of: ", stringify!(ble_msg_gap_scan_response_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_scan_response_evt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_gap_scan_response_evt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rssi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_scan_response_evt_t),
            "::",
            stringify!(rssi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_type) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_scan_response_evt_t),
            "::",
            stringify!(packet_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sender) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_scan_response_evt_t),
            "::",
            stringify!(sender)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_scan_response_evt_t),
            "::",
            stringify!(address_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bond) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_scan_response_evt_t),
            "::",
            stringify!(bond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_scan_response_evt_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_gap_mode_changed_evt_t {
    pub discover: uint8,
    pub connect: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_gap_mode_changed_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_gap_mode_changed_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_gap_mode_changed_evt_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_gap_mode_changed_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_gap_mode_changed_evt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_gap_mode_changed_evt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).discover) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_mode_changed_evt_t),
            "::",
            stringify!(discover)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connect) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_gap_mode_changed_evt_t),
            "::",
            stringify!(connect)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_config_irq_cmd_t {
    pub port: uint8,
    pub enable_bits: uint8,
    pub falling_edge: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_config_irq_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_config_irq_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_config_irq_cmd_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_config_irq_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_config_irq_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_config_irq_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_irq_cmd_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_bits) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_irq_cmd_t),
            "::",
            stringify!(enable_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).falling_edge) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_irq_cmd_t),
            "::",
            stringify!(falling_edge)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_config_irq_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_config_irq_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_config_irq_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_config_irq_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_config_irq_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_config_irq_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_config_irq_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_irq_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_set_soft_timer_cmd_t {
    pub time: uint32,
    pub handle: uint8,
    pub single_shot: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_set_soft_timer_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_set_soft_timer_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_set_soft_timer_cmd_t>(),
        10usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_set_soft_timer_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_set_soft_timer_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_set_soft_timer_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_set_soft_timer_cmd_t),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_set_soft_timer_cmd_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).single_shot) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_set_soft_timer_cmd_t),
            "::",
            stringify!(single_shot)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_set_soft_timer_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_set_soft_timer_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_set_soft_timer_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_set_soft_timer_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_set_soft_timer_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_set_soft_timer_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_set_soft_timer_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_set_soft_timer_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_adc_read_cmd_t {
    pub input: uint8,
    pub decimation: uint8,
    pub reference_selection: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_adc_read_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_adc_read_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_adc_read_cmd_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_adc_read_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_adc_read_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_hardware_adc_read_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_adc_read_cmd_t),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decimation) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_adc_read_cmd_t),
            "::",
            stringify!(decimation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_selection) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_adc_read_cmd_t),
            "::",
            stringify!(reference_selection)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_adc_read_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_adc_read_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_adc_read_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_adc_read_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_adc_read_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_adc_read_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_hardware_adc_read_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_adc_read_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_config_direction_cmd_t {
    pub port: uint8,
    pub direction: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_config_direction_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_config_direction_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_config_direction_cmd_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_config_direction_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_config_direction_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_config_direction_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_direction_cmd_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_direction_cmd_t),
            "::",
            stringify!(direction)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_config_direction_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_config_direction_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_config_direction_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_config_direction_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_config_direction_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_config_direction_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_config_direction_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_direction_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_config_function_cmd_t {
    pub port: uint8,
    pub function: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_config_function_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_config_function_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_config_function_cmd_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_config_function_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_config_function_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_config_function_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_function_cmd_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_function_cmd_t),
            "::",
            stringify!(function)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_config_function_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_config_function_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_config_function_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_config_function_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_config_function_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_config_function_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_config_function_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_function_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_config_pull_cmd_t {
    pub port: uint8,
    pub tristate_mask: uint8,
    pub pull_up: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_config_pull_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_config_pull_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_config_pull_cmd_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_config_pull_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_config_pull_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_config_pull_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_pull_cmd_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tristate_mask) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_pull_cmd_t),
            "::",
            stringify!(tristate_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pull_up) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_pull_cmd_t),
            "::",
            stringify!(pull_up)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_config_pull_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_config_pull_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_config_pull_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_config_pull_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_config_pull_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_config_pull_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_config_pull_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_config_pull_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_write_cmd_t {
    pub port: uint8,
    pub mask: uint8,
    pub data: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_write_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_write_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_write_cmd_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_write_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_write_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_write_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_write_cmd_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_write_cmd_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_write_cmd_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_write_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_write_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_write_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_write_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_write_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_write_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_write_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_write_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_read_cmd_t {
    pub port: uint8,
    pub mask: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_read_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_read_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_read_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_io_port_read_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_read_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_read_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_read_cmd_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_read_cmd_t),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_read_rsp_t {
    pub result: uint16,
    pub port: uint8,
    pub data: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_read_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_read_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_read_rsp_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_io_port_read_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_read_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_read_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_read_rsp_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_read_rsp_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_read_rsp_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_spi_config_cmd_t {
    pub channel: uint8,
    pub polarity: uint8,
    pub phase: uint8,
    pub bit_order: uint8,
    pub baud_e: uint8,
    pub baud_m: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_spi_config_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_spi_config_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_spi_config_cmd_t>(),
        6usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_spi_config_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_spi_config_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_spi_config_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_spi_config_cmd_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).polarity) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_spi_config_cmd_t),
            "::",
            stringify!(polarity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phase) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_spi_config_cmd_t),
            "::",
            stringify!(phase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit_order) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_spi_config_cmd_t),
            "::",
            stringify!(bit_order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baud_e) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_spi_config_cmd_t),
            "::",
            stringify!(baud_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baud_m) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_spi_config_cmd_t),
            "::",
            stringify!(baud_m)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_spi_config_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_spi_config_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_spi_config_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_spi_config_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_spi_config_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_spi_config_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_spi_config_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_spi_config_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_hardware_spi_transfer_cmd_t {
    pub channel: uint8,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_spi_transfer_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_spi_transfer_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_spi_transfer_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_spi_transfer_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_spi_transfer_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_spi_transfer_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_spi_transfer_cmd_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_spi_transfer_cmd_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_hardware_spi_transfer_rsp_t {
    pub result: uint16,
    pub channel: uint8,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_spi_transfer_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_spi_transfer_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_spi_transfer_rsp_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_spi_transfer_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_spi_transfer_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_spi_transfer_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_spi_transfer_rsp_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_spi_transfer_rsp_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_spi_transfer_rsp_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_i2c_read_cmd_t {
    pub address: uint8,
    pub stop: uint8,
    pub length: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_i2c_read_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_i2c_read_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_i2c_read_cmd_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_i2c_read_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_i2c_read_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_hardware_i2c_read_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_i2c_read_cmd_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_i2c_read_cmd_t),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_i2c_read_cmd_t),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_hardware_i2c_read_rsp_t {
    pub result: uint16,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_i2c_read_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_i2c_read_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_i2c_read_rsp_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_i2c_read_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_i2c_read_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_hardware_i2c_read_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_i2c_read_rsp_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_i2c_read_rsp_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_hardware_i2c_write_cmd_t {
    pub address: uint8,
    pub stop: uint8,
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_i2c_write_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_i2c_write_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_i2c_write_cmd_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_i2c_write_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_i2c_write_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_i2c_write_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_i2c_write_cmd_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_i2c_write_cmd_t),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_i2c_write_cmd_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_i2c_write_rsp_t {
    pub written: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_i2c_write_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_i2c_write_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_i2c_write_rsp_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_i2c_write_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_i2c_write_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_i2c_write_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).written) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_i2c_write_rsp_t),
            "::",
            stringify!(written)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_set_txpower_cmd_t {
    pub power: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_set_txpower_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_set_txpower_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_set_txpower_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_set_txpower_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_set_txpower_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_set_txpower_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_set_txpower_cmd_t),
            "::",
            stringify!(power)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_timer_comparator_cmd_t {
    pub timer: uint8,
    pub channel: uint8,
    pub mode: uint8,
    pub comparator_value: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_timer_comparator_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_timer_comparator_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_timer_comparator_cmd_t>(),
        5usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_timer_comparator_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_timer_comparator_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_timer_comparator_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_timer_comparator_cmd_t),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_timer_comparator_cmd_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_timer_comparator_cmd_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comparator_value) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_timer_comparator_cmd_t),
            "::",
            stringify!(comparator_value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_timer_comparator_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_timer_comparator_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_timer_comparator_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_timer_comparator_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_timer_comparator_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_timer_comparator_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_timer_comparator_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_timer_comparator_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_irq_enable_cmd_t {
    pub port: uint8,
    pub enable_bits: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_irq_enable_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_irq_enable_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_irq_enable_cmd_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_irq_enable_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_irq_enable_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_irq_enable_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_irq_enable_cmd_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_bits) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_irq_enable_cmd_t),
            "::",
            stringify!(enable_bits)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_irq_enable_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_irq_enable_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_irq_enable_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_irq_enable_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_irq_enable_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_irq_enable_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_irq_enable_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_irq_enable_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_irq_direction_cmd_t {
    pub port: uint8,
    pub falling_edge: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_irq_direction_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_irq_direction_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_irq_direction_cmd_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_irq_direction_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_irq_direction_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_irq_direction_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_irq_direction_cmd_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).falling_edge) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_irq_direction_cmd_t),
            "::",
            stringify!(falling_edge)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_irq_direction_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_irq_direction_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_irq_direction_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_irq_direction_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_irq_direction_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_irq_direction_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_irq_direction_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_irq_direction_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_analog_comparator_enable_cmd_t {
    pub enable: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_analog_comparator_enable_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_analog_comparator_enable_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_analog_comparator_enable_cmd_t>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_analog_comparator_enable_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_analog_comparator_enable_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_analog_comparator_enable_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_analog_comparator_enable_cmd_t),
            "::",
            stringify!(enable)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_analog_comparator_read_rsp_t {
    pub result: uint16,
    pub output: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_analog_comparator_read_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_analog_comparator_read_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_analog_comparator_read_rsp_t>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_analog_comparator_read_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_analog_comparator_read_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_analog_comparator_read_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_analog_comparator_read_rsp_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_analog_comparator_read_rsp_t),
            "::",
            stringify!(output)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_analog_comparator_config_irq_cmd_t {
    pub enabled: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_analog_comparator_config_irq_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_analog_comparator_config_irq_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_analog_comparator_config_irq_cmd_t>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_analog_comparator_config_irq_cmd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_analog_comparator_config_irq_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_analog_comparator_config_irq_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_analog_comparator_config_irq_cmd_t),
            "::",
            stringify!(enabled)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_analog_comparator_config_irq_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_analog_comparator_config_irq_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_analog_comparator_config_irq_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_analog_comparator_config_irq_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_analog_comparator_config_irq_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_analog_comparator_config_irq_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_analog_comparator_config_irq_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_analog_comparator_config_irq_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_set_rxgain_cmd_t {
    pub gain: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_set_rxgain_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_set_rxgain_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_set_rxgain_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_set_rxgain_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_set_rxgain_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_set_rxgain_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_set_rxgain_cmd_t),
            "::",
            stringify!(gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_usb_enable_cmd_t {
    pub enable: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_usb_enable_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_usb_enable_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_usb_enable_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_usb_enable_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_usb_enable_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_usb_enable_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_usb_enable_cmd_t),
            "::",
            stringify!(enable)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_usb_enable_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_usb_enable_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_usb_enable_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_usb_enable_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_usb_enable_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_usb_enable_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_usb_enable_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_usb_enable_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_sleep_enable_cmd_t {
    pub enable: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_sleep_enable_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_sleep_enable_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_sleep_enable_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_sleep_enable_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_sleep_enable_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_sleep_enable_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_sleep_enable_cmd_t),
            "::",
            stringify!(enable)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_sleep_enable_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_sleep_enable_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_sleep_enable_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_sleep_enable_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_sleep_enable_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_sleep_enable_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_sleep_enable_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_sleep_enable_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_get_timestamp_rsp_t {
    pub value: uint32,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_get_timestamp_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_get_timestamp_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_get_timestamp_rsp_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_get_timestamp_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_get_timestamp_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_get_timestamp_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_get_timestamp_rsp_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_io_port_status_evt_t {
    pub timestamp: uint32,
    pub port: uint8,
    pub irq: uint8,
    pub state: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_io_port_status_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_io_port_status_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_io_port_status_evt_t>(),
        11usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_io_port_status_evt_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_io_port_status_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_io_port_status_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_status_evt_t),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_status_evt_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).irq) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_status_evt_t),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_io_port_status_evt_t),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_soft_timer_evt_t {
    pub handle: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_soft_timer_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_soft_timer_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_soft_timer_evt_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_soft_timer_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_soft_timer_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_soft_timer_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_soft_timer_evt_t),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_adc_result_evt_t {
    pub input: uint8,
    pub value: int16,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_adc_result_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_adc_result_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_adc_result_evt_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_hardware_adc_result_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_adc_result_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_adc_result_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_adc_result_evt_t),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_adc_result_evt_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_hardware_analog_comparator_status_evt_t {
    pub timestamp: uint32,
    pub output: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_hardware_analog_comparator_status_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_hardware_analog_comparator_status_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_hardware_analog_comparator_status_evt_t>(),
        9usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_hardware_analog_comparator_status_evt_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_hardware_analog_comparator_status_evt_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_hardware_analog_comparator_status_evt_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_analog_comparator_status_evt_t),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_hardware_analog_comparator_status_evt_t),
            "::",
            stringify!(output)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_test_phy_tx_cmd_t {
    pub channel: uint8,
    pub length: uint8,
    pub type_: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_test_phy_tx_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_test_phy_tx_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_test_phy_tx_cmd_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_test_phy_tx_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_test_phy_tx_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_test_phy_tx_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_test_phy_tx_cmd_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_test_phy_tx_cmd_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_test_phy_tx_cmd_t),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_test_phy_rx_cmd_t {
    pub channel: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_test_phy_rx_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_test_phy_rx_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_test_phy_rx_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_test_phy_rx_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_test_phy_rx_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_test_phy_rx_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_test_phy_rx_cmd_t),
            "::",
            stringify!(channel)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_test_phy_end_rsp_t {
    pub counter: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_test_phy_end_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_test_phy_end_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_test_phy_end_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_test_phy_end_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_test_phy_end_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_test_phy_end_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_test_phy_end_rsp_t),
            "::",
            stringify!(counter)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_test_get_channel_map_rsp_t {
    pub channel_map: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_test_get_channel_map_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_test_get_channel_map_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_test_get_channel_map_rsp_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_test_get_channel_map_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_test_get_channel_map_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_test_get_channel_map_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel_map) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_test_get_channel_map_rsp_t),
            "::",
            stringify!(channel_map)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_test_debug_cmd_t {
    pub opcode: uint8,
    pub input: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_test_debug_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_test_debug_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_test_debug_cmd_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_test_debug_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_test_debug_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_test_debug_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_test_debug_cmd_t),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_test_debug_cmd_t),
            "::",
            stringify!(input)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_test_debug_rsp_t {
    pub opcode: uint8,
    pub output: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_test_debug_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_test_debug_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_test_debug_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_test_debug_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_test_debug_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_test_debug_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_test_debug_rsp_t),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_test_debug_rsp_t),
            "::",
            stringify!(output)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_test_channel_mode_cmd_t {
    pub mode: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_test_channel_mode_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_test_channel_mode_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_test_channel_mode_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_test_channel_mode_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_test_channel_mode_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_test_channel_mode_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_test_channel_mode_cmd_t),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_dfu_reset_cmd_t {
    pub dfu: uint8,
}
#[test]
fn bindgen_test_layout_ble_msg_dfu_reset_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_dfu_reset_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_dfu_reset_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_dfu_reset_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_dfu_reset_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_dfu_reset_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfu) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_dfu_reset_cmd_t),
            "::",
            stringify!(dfu)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_dfu_flash_set_address_cmd_t {
    pub address: uint32,
}
#[test]
fn bindgen_test_layout_ble_msg_dfu_flash_set_address_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_dfu_flash_set_address_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_dfu_flash_set_address_cmd_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_msg_dfu_flash_set_address_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_dfu_flash_set_address_cmd_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_dfu_flash_set_address_cmd_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_dfu_flash_set_address_cmd_t),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_dfu_flash_set_address_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_dfu_flash_set_address_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_dfu_flash_set_address_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_dfu_flash_set_address_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_dfu_flash_set_address_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_dfu_flash_set_address_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_dfu_flash_set_address_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_dfu_flash_set_address_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
pub struct ble_msg_dfu_flash_upload_cmd_t {
    pub data: uint8array,
}
#[test]
fn bindgen_test_layout_ble_msg_dfu_flash_upload_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_dfu_flash_upload_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_dfu_flash_upload_cmd_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_msg_dfu_flash_upload_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_dfu_flash_upload_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_dfu_flash_upload_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_dfu_flash_upload_cmd_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_dfu_flash_upload_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_dfu_flash_upload_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_dfu_flash_upload_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_dfu_flash_upload_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_msg_dfu_flash_upload_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_dfu_flash_upload_rsp_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_dfu_flash_upload_rsp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_dfu_flash_upload_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_dfu_flash_upload_finish_rsp_t {
    pub result: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_dfu_flash_upload_finish_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_dfu_flash_upload_finish_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_dfu_flash_upload_finish_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_dfu_flash_upload_finish_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_dfu_flash_upload_finish_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_dfu_flash_upload_finish_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_dfu_flash_upload_finish_rsp_t),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_dfu_get_bootloader_crc_rsp_t {
    pub crc: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_dfu_get_bootloader_crc_rsp_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_dfu_get_bootloader_crc_rsp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_dfu_get_bootloader_crc_rsp_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_msg_dfu_get_bootloader_crc_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_dfu_get_bootloader_crc_rsp_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_msg_dfu_get_bootloader_crc_rsp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_dfu_get_bootloader_crc_rsp_t),
            "::",
            stringify!(crc)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_dfu_delay_reset_cmd_t {
    pub dfu: uint8,
    pub delay_ms: uint16,
}
#[test]
fn bindgen_test_layout_ble_msg_dfu_delay_reset_cmd_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_dfu_delay_reset_cmd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_dfu_delay_reset_cmd_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_msg_dfu_delay_reset_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_dfu_delay_reset_cmd_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_dfu_delay_reset_cmd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfu) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_dfu_delay_reset_cmd_t),
            "::",
            stringify!(dfu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay_ms) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_dfu_delay_reset_cmd_t),
            "::",
            stringify!(delay_ms)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_msg_dfu_boot_evt_t {
    pub version: uint32,
}
#[test]
fn bindgen_test_layout_ble_msg_dfu_boot_evt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_msg_dfu_boot_evt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_msg_dfu_boot_evt_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_msg_dfu_boot_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_msg_dfu_boot_evt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_msg_dfu_boot_evt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_msg_dfu_boot_evt_t),
            "::",
            stringify!(version)
        )
    );
}
#[repr(C, packed(4))]
//#[repr(align(4))]
pub struct ble_cmd_packet {
    pub header: ble_header,
    pub __bindgen_anon_1: ble_cmd_packet__bindgen_ty_1,
}
#[repr(C)]
pub struct ble_cmd_packet__bindgen_ty_1 {
    pub handle: __BindgenUnionField<uint8>,
    pub system_reset_cmd: __BindgenUnionField<ble_msg_system_reset_cmd_t>,
    pub system_reg_write_cmd: __BindgenUnionField<ble_msg_system_reg_write_cmd_t>,
    pub system_reg_read_cmd: __BindgenUnionField<ble_msg_system_reg_read_cmd_t>,
    pub system_read_memory_cmd: __BindgenUnionField<ble_msg_system_read_memory_cmd_t>,
    pub system_endpoint_tx_cmd: __BindgenUnionField<ble_msg_system_endpoint_tx_cmd_t>,
    pub system_whitelist_append_cmd: __BindgenUnionField<ble_msg_system_whitelist_append_cmd_t>,
    pub system_whitelist_remove_cmd: __BindgenUnionField<ble_msg_system_whitelist_remove_cmd_t>,
    pub system_endpoint_rx_cmd: __BindgenUnionField<ble_msg_system_endpoint_rx_cmd_t>,
    pub system_endpoint_set_watermarks_cmd:
        __BindgenUnionField<ble_msg_system_endpoint_set_watermarks_cmd_t>,
    pub system_aes_setkey_cmd: __BindgenUnionField<ble_msg_system_aes_setkey_cmd_t>,
    pub system_aes_encrypt_cmd: __BindgenUnionField<ble_msg_system_aes_encrypt_cmd_t>,
    pub system_aes_decrypt_cmd: __BindgenUnionField<ble_msg_system_aes_decrypt_cmd_t>,
    pub system_delay_reset_cmd: __BindgenUnionField<ble_msg_system_delay_reset_cmd_t>,
    pub system_boot_evt: __BindgenUnionField<ble_msg_system_boot_evt_t>,
    pub system_debug_evt: __BindgenUnionField<ble_msg_system_debug_evt_t>,
    pub system_endpoint_watermark_rx_evt:
        __BindgenUnionField<ble_msg_system_endpoint_watermark_rx_evt_t>,
    pub system_endpoint_watermark_tx_evt:
        __BindgenUnionField<ble_msg_system_endpoint_watermark_tx_evt_t>,
    pub system_script_failure_evt: __BindgenUnionField<ble_msg_system_script_failure_evt_t>,
    pub system_protocol_error_evt: __BindgenUnionField<ble_msg_system_protocol_error_evt_t>,
    pub system_usb_enumerated_evt: __BindgenUnionField<ble_msg_system_usb_enumerated_evt_t>,
    pub system_address_get_rsp: __BindgenUnionField<ble_msg_system_address_get_rsp_t>,
    pub system_reg_write_rsp: __BindgenUnionField<ble_msg_system_reg_write_rsp_t>,
    pub system_reg_read_rsp: __BindgenUnionField<ble_msg_system_reg_read_rsp_t>,
    pub system_get_counters_rsp: __BindgenUnionField<ble_msg_system_get_counters_rsp_t>,
    pub system_get_connections_rsp: __BindgenUnionField<ble_msg_system_get_connections_rsp_t>,
    pub system_read_memory_rsp: __BindgenUnionField<ble_msg_system_read_memory_rsp_t>,
    pub system_get_info_rsp: __BindgenUnionField<ble_msg_system_get_info_rsp_t>,
    pub system_endpoint_tx_rsp: __BindgenUnionField<ble_msg_system_endpoint_tx_rsp_t>,
    pub system_whitelist_append_rsp: __BindgenUnionField<ble_msg_system_whitelist_append_rsp_t>,
    pub system_whitelist_remove_rsp: __BindgenUnionField<ble_msg_system_whitelist_remove_rsp_t>,
    pub system_endpoint_rx_rsp: __BindgenUnionField<ble_msg_system_endpoint_rx_rsp_t>,
    pub system_endpoint_set_watermarks_rsp:
        __BindgenUnionField<ble_msg_system_endpoint_set_watermarks_rsp_t>,
    pub system_aes_encrypt_rsp: __BindgenUnionField<ble_msg_system_aes_encrypt_rsp_t>,
    pub system_aes_decrypt_rsp: __BindgenUnionField<ble_msg_system_aes_decrypt_rsp_t>,
    pub system_usb_enumeration_status_get_rsp:
        __BindgenUnionField<ble_msg_system_usb_enumeration_status_get_rsp_t>,
    pub system_get_bootloader_crc_rsp: __BindgenUnionField<ble_msg_system_get_bootloader_crc_rsp_t>,
    pub flash_ps_save_cmd: __BindgenUnionField<ble_msg_flash_ps_save_cmd_t>,
    pub flash_ps_load_cmd: __BindgenUnionField<ble_msg_flash_ps_load_cmd_t>,
    pub flash_ps_erase_cmd: __BindgenUnionField<ble_msg_flash_ps_erase_cmd_t>,
    pub flash_erase_page_cmd: __BindgenUnionField<ble_msg_flash_erase_page_cmd_t>,
    pub flash_write_data_cmd: __BindgenUnionField<ble_msg_flash_write_data_cmd_t>,
    pub flash_read_data_cmd: __BindgenUnionField<ble_msg_flash_read_data_cmd_t>,
    pub flash_ps_key_evt: __BindgenUnionField<ble_msg_flash_ps_key_evt_t>,
    pub flash_ps_save_rsp: __BindgenUnionField<ble_msg_flash_ps_save_rsp_t>,
    pub flash_ps_load_rsp: __BindgenUnionField<ble_msg_flash_ps_load_rsp_t>,
    pub flash_erase_page_rsp: __BindgenUnionField<ble_msg_flash_erase_page_rsp_t>,
    pub flash_write_data_rsp: __BindgenUnionField<ble_msg_flash_write_data_rsp_t>,
    pub flash_read_data_rsp: __BindgenUnionField<ble_msg_flash_read_data_rsp_t>,
    pub attributes_write_cmd: __BindgenUnionField<ble_msg_attributes_write_cmd_t>,
    pub attributes_read_cmd: __BindgenUnionField<ble_msg_attributes_read_cmd_t>,
    pub attributes_read_type_cmd: __BindgenUnionField<ble_msg_attributes_read_type_cmd_t>,
    pub attributes_user_read_response_cmd:
        __BindgenUnionField<ble_msg_attributes_user_read_response_cmd_t>,
    pub attributes_user_write_response_cmd:
        __BindgenUnionField<ble_msg_attributes_user_write_response_cmd_t>,
    pub attributes_send_cmd: __BindgenUnionField<ble_msg_attributes_send_cmd_t>,
    pub attributes_value_evt: __BindgenUnionField<ble_msg_attributes_value_evt_t>,
    pub attributes_user_read_request_evt:
        __BindgenUnionField<ble_msg_attributes_user_read_request_evt_t>,
    pub attributes_status_evt: __BindgenUnionField<ble_msg_attributes_status_evt_t>,
    pub attributes_write_rsp: __BindgenUnionField<ble_msg_attributes_write_rsp_t>,
    pub attributes_read_rsp: __BindgenUnionField<ble_msg_attributes_read_rsp_t>,
    pub attributes_read_type_rsp: __BindgenUnionField<ble_msg_attributes_read_type_rsp_t>,
    pub attributes_send_rsp: __BindgenUnionField<ble_msg_attributes_send_rsp_t>,
    pub connection_disconnect_cmd: __BindgenUnionField<ble_msg_connection_disconnect_cmd_t>,
    pub connection_get_rssi_cmd: __BindgenUnionField<ble_msg_connection_get_rssi_cmd_t>,
    pub connection_update_cmd: __BindgenUnionField<ble_msg_connection_update_cmd_t>,
    pub connection_version_update_cmd: __BindgenUnionField<ble_msg_connection_version_update_cmd_t>,
    pub connection_channel_map_get_cmd:
        __BindgenUnionField<ble_msg_connection_channel_map_get_cmd_t>,
    pub connection_channel_map_set_cmd:
        __BindgenUnionField<ble_msg_connection_channel_map_set_cmd_t>,
    pub connection_features_get_cmd: __BindgenUnionField<ble_msg_connection_features_get_cmd_t>,
    pub connection_get_status_cmd: __BindgenUnionField<ble_msg_connection_get_status_cmd_t>,
    pub connection_raw_tx_cmd: __BindgenUnionField<ble_msg_connection_raw_tx_cmd_t>,
    pub connection_slave_latency_disable_cmd:
        __BindgenUnionField<ble_msg_connection_slave_latency_disable_cmd_t>,
    pub connection_status_evt: __BindgenUnionField<ble_msg_connection_status_evt_t>,
    pub connection_version_ind_evt: __BindgenUnionField<ble_msg_connection_version_ind_evt_t>,
    pub connection_feature_ind_evt: __BindgenUnionField<ble_msg_connection_feature_ind_evt_t>,
    pub connection_raw_rx_evt: __BindgenUnionField<ble_msg_connection_raw_rx_evt_t>,
    pub connection_disconnected_evt: __BindgenUnionField<ble_msg_connection_disconnected_evt_t>,
    pub connection_disconnect_rsp: __BindgenUnionField<ble_msg_connection_disconnect_rsp_t>,
    pub connection_get_rssi_rsp: __BindgenUnionField<ble_msg_connection_get_rssi_rsp_t>,
    pub connection_update_rsp: __BindgenUnionField<ble_msg_connection_update_rsp_t>,
    pub connection_version_update_rsp: __BindgenUnionField<ble_msg_connection_version_update_rsp_t>,
    pub connection_channel_map_get_rsp:
        __BindgenUnionField<ble_msg_connection_channel_map_get_rsp_t>,
    pub connection_channel_map_set_rsp:
        __BindgenUnionField<ble_msg_connection_channel_map_set_rsp_t>,
    pub connection_features_get_rsp: __BindgenUnionField<ble_msg_connection_features_get_rsp_t>,
    pub connection_get_status_rsp: __BindgenUnionField<ble_msg_connection_get_status_rsp_t>,
    pub connection_raw_tx_rsp: __BindgenUnionField<ble_msg_connection_raw_tx_rsp_t>,
    pub connection_slave_latency_disable_rsp:
        __BindgenUnionField<ble_msg_connection_slave_latency_disable_rsp_t>,
    pub attclient_find_by_type_value_cmd:
        __BindgenUnionField<ble_msg_attclient_find_by_type_value_cmd_t>,
    pub attclient_read_by_group_type_cmd:
        __BindgenUnionField<ble_msg_attclient_read_by_group_type_cmd_t>,
    pub attclient_read_by_type_cmd: __BindgenUnionField<ble_msg_attclient_read_by_type_cmd_t>,
    pub attclient_find_information_cmd:
        __BindgenUnionField<ble_msg_attclient_find_information_cmd_t>,
    pub attclient_read_by_handle_cmd: __BindgenUnionField<ble_msg_attclient_read_by_handle_cmd_t>,
    pub attclient_attribute_write_cmd: __BindgenUnionField<ble_msg_attclient_attribute_write_cmd_t>,
    pub attclient_write_command_cmd: __BindgenUnionField<ble_msg_attclient_write_command_cmd_t>,
    pub attclient_indicate_confirm_cmd:
        __BindgenUnionField<ble_msg_attclient_indicate_confirm_cmd_t>,
    pub attclient_read_long_cmd: __BindgenUnionField<ble_msg_attclient_read_long_cmd_t>,
    pub attclient_prepare_write_cmd: __BindgenUnionField<ble_msg_attclient_prepare_write_cmd_t>,
    pub attclient_execute_write_cmd: __BindgenUnionField<ble_msg_attclient_execute_write_cmd_t>,
    pub attclient_read_multiple_cmd: __BindgenUnionField<ble_msg_attclient_read_multiple_cmd_t>,
    pub attclient_indicated_evt: __BindgenUnionField<ble_msg_attclient_indicated_evt_t>,
    pub attclient_procedure_completed_evt:
        __BindgenUnionField<ble_msg_attclient_procedure_completed_evt_t>,
    pub attclient_group_found_evt: __BindgenUnionField<ble_msg_attclient_group_found_evt_t>,
    pub attclient_attribute_found_evt: __BindgenUnionField<ble_msg_attclient_attribute_found_evt_t>,
    pub attclient_find_information_found_evt:
        __BindgenUnionField<ble_msg_attclient_find_information_found_evt_t>,
    pub attclient_attribute_value_evt: __BindgenUnionField<ble_msg_attclient_attribute_value_evt_t>,
    pub attclient_read_multiple_response_evt:
        __BindgenUnionField<ble_msg_attclient_read_multiple_response_evt_t>,
    pub attclient_find_by_type_value_rsp:
        __BindgenUnionField<ble_msg_attclient_find_by_type_value_rsp_t>,
    pub attclient_read_by_group_type_rsp:
        __BindgenUnionField<ble_msg_attclient_read_by_group_type_rsp_t>,
    pub attclient_read_by_type_rsp: __BindgenUnionField<ble_msg_attclient_read_by_type_rsp_t>,
    pub attclient_find_information_rsp:
        __BindgenUnionField<ble_msg_attclient_find_information_rsp_t>,
    pub attclient_read_by_handle_rsp: __BindgenUnionField<ble_msg_attclient_read_by_handle_rsp_t>,
    pub attclient_attribute_write_rsp: __BindgenUnionField<ble_msg_attclient_attribute_write_rsp_t>,
    pub attclient_write_command_rsp: __BindgenUnionField<ble_msg_attclient_write_command_rsp_t>,
    pub attclient_indicate_confirm_rsp:
        __BindgenUnionField<ble_msg_attclient_indicate_confirm_rsp_t>,
    pub attclient_read_long_rsp: __BindgenUnionField<ble_msg_attclient_read_long_rsp_t>,
    pub attclient_prepare_write_rsp: __BindgenUnionField<ble_msg_attclient_prepare_write_rsp_t>,
    pub attclient_execute_write_rsp: __BindgenUnionField<ble_msg_attclient_execute_write_rsp_t>,
    pub attclient_read_multiple_rsp: __BindgenUnionField<ble_msg_attclient_read_multiple_rsp_t>,
    pub sm_encrypt_start_cmd: __BindgenUnionField<ble_msg_sm_encrypt_start_cmd_t>,
    pub sm_set_bondable_mode_cmd: __BindgenUnionField<ble_msg_sm_set_bondable_mode_cmd_t>,
    pub sm_delete_bonding_cmd: __BindgenUnionField<ble_msg_sm_delete_bonding_cmd_t>,
    pub sm_set_parameters_cmd: __BindgenUnionField<ble_msg_sm_set_parameters_cmd_t>,
    pub sm_passkey_entry_cmd: __BindgenUnionField<ble_msg_sm_passkey_entry_cmd_t>,
    pub sm_set_oob_data_cmd: __BindgenUnionField<ble_msg_sm_set_oob_data_cmd_t>,
    pub sm_set_pairing_distribution_keys_cmd:
        __BindgenUnionField<ble_msg_sm_set_pairing_distribution_keys_cmd_t>,
    pub sm_smp_data_evt: __BindgenUnionField<ble_msg_sm_smp_data_evt_t>,
    pub sm_bonding_fail_evt: __BindgenUnionField<ble_msg_sm_bonding_fail_evt_t>,
    pub sm_passkey_display_evt: __BindgenUnionField<ble_msg_sm_passkey_display_evt_t>,
    pub sm_passkey_request_evt: __BindgenUnionField<ble_msg_sm_passkey_request_evt_t>,
    pub sm_bond_status_evt: __BindgenUnionField<ble_msg_sm_bond_status_evt_t>,
    pub sm_encrypt_start_rsp: __BindgenUnionField<ble_msg_sm_encrypt_start_rsp_t>,
    pub sm_delete_bonding_rsp: __BindgenUnionField<ble_msg_sm_delete_bonding_rsp_t>,
    pub sm_passkey_entry_rsp: __BindgenUnionField<ble_msg_sm_passkey_entry_rsp_t>,
    pub sm_get_bonds_rsp: __BindgenUnionField<ble_msg_sm_get_bonds_rsp_t>,
    pub sm_whitelist_bonds_rsp: __BindgenUnionField<ble_msg_sm_whitelist_bonds_rsp_t>,
    pub sm_set_pairing_distribution_keys_rsp:
        __BindgenUnionField<ble_msg_sm_set_pairing_distribution_keys_rsp_t>,
    pub gap_set_privacy_flags_cmd: __BindgenUnionField<ble_msg_gap_set_privacy_flags_cmd_t>,
    pub gap_set_mode_cmd: __BindgenUnionField<ble_msg_gap_set_mode_cmd_t>,
    pub gap_discover_cmd: __BindgenUnionField<ble_msg_gap_discover_cmd_t>,
    pub gap_connect_direct_cmd: __BindgenUnionField<ble_msg_gap_connect_direct_cmd_t>,
    pub gap_connect_selective_cmd: __BindgenUnionField<ble_msg_gap_connect_selective_cmd_t>,
    pub gap_set_filtering_cmd: __BindgenUnionField<ble_msg_gap_set_filtering_cmd_t>,
    pub gap_set_scan_parameters_cmd: __BindgenUnionField<ble_msg_gap_set_scan_parameters_cmd_t>,
    pub gap_set_adv_parameters_cmd: __BindgenUnionField<ble_msg_gap_set_adv_parameters_cmd_t>,
    pub gap_set_adv_data_cmd: __BindgenUnionField<ble_msg_gap_set_adv_data_cmd_t>,
    pub gap_set_directed_connectable_mode_cmd:
        __BindgenUnionField<ble_msg_gap_set_directed_connectable_mode_cmd_t>,
    pub gap_set_initiating_con_parameters_cmd:
        __BindgenUnionField<ble_msg_gap_set_initiating_con_parameters_cmd_t>,
    pub gap_set_nonresolvable_address_cmd:
        __BindgenUnionField<ble_msg_gap_set_nonresolvable_address_cmd_t>,
    pub gap_scan_response_evt: __BindgenUnionField<ble_msg_gap_scan_response_evt_t>,
    pub gap_mode_changed_evt: __BindgenUnionField<ble_msg_gap_mode_changed_evt_t>,
    pub gap_set_mode_rsp: __BindgenUnionField<ble_msg_gap_set_mode_rsp_t>,
    pub gap_discover_rsp: __BindgenUnionField<ble_msg_gap_discover_rsp_t>,
    pub gap_connect_direct_rsp: __BindgenUnionField<ble_msg_gap_connect_direct_rsp_t>,
    pub gap_end_procedure_rsp: __BindgenUnionField<ble_msg_gap_end_procedure_rsp_t>,
    pub gap_connect_selective_rsp: __BindgenUnionField<ble_msg_gap_connect_selective_rsp_t>,
    pub gap_set_filtering_rsp: __BindgenUnionField<ble_msg_gap_set_filtering_rsp_t>,
    pub gap_set_scan_parameters_rsp: __BindgenUnionField<ble_msg_gap_set_scan_parameters_rsp_t>,
    pub gap_set_adv_parameters_rsp: __BindgenUnionField<ble_msg_gap_set_adv_parameters_rsp_t>,
    pub gap_set_adv_data_rsp: __BindgenUnionField<ble_msg_gap_set_adv_data_rsp_t>,
    pub gap_set_directed_connectable_mode_rsp:
        __BindgenUnionField<ble_msg_gap_set_directed_connectable_mode_rsp_t>,
    pub gap_set_initiating_con_parameters_rsp:
        __BindgenUnionField<ble_msg_gap_set_initiating_con_parameters_rsp_t>,
    pub gap_set_nonresolvable_address_rsp:
        __BindgenUnionField<ble_msg_gap_set_nonresolvable_address_rsp_t>,
    pub hardware_io_port_config_irq_cmd:
        __BindgenUnionField<ble_msg_hardware_io_port_config_irq_cmd_t>,
    pub hardware_set_soft_timer_cmd: __BindgenUnionField<ble_msg_hardware_set_soft_timer_cmd_t>,
    pub hardware_adc_read_cmd: __BindgenUnionField<ble_msg_hardware_adc_read_cmd_t>,
    pub hardware_io_port_config_direction_cmd:
        __BindgenUnionField<ble_msg_hardware_io_port_config_direction_cmd_t>,
    pub hardware_io_port_config_function_cmd:
        __BindgenUnionField<ble_msg_hardware_io_port_config_function_cmd_t>,
    pub hardware_io_port_config_pull_cmd:
        __BindgenUnionField<ble_msg_hardware_io_port_config_pull_cmd_t>,
    pub hardware_io_port_write_cmd: __BindgenUnionField<ble_msg_hardware_io_port_write_cmd_t>,
    pub hardware_io_port_read_cmd: __BindgenUnionField<ble_msg_hardware_io_port_read_cmd_t>,
    pub hardware_spi_config_cmd: __BindgenUnionField<ble_msg_hardware_spi_config_cmd_t>,
    pub hardware_spi_transfer_cmd: __BindgenUnionField<ble_msg_hardware_spi_transfer_cmd_t>,
    pub hardware_i2c_read_cmd: __BindgenUnionField<ble_msg_hardware_i2c_read_cmd_t>,
    pub hardware_i2c_write_cmd: __BindgenUnionField<ble_msg_hardware_i2c_write_cmd_t>,
    pub hardware_set_txpower_cmd: __BindgenUnionField<ble_msg_hardware_set_txpower_cmd_t>,
    pub hardware_timer_comparator_cmd: __BindgenUnionField<ble_msg_hardware_timer_comparator_cmd_t>,
    pub hardware_io_port_irq_enable_cmd:
        __BindgenUnionField<ble_msg_hardware_io_port_irq_enable_cmd_t>,
    pub hardware_io_port_irq_direction_cmd:
        __BindgenUnionField<ble_msg_hardware_io_port_irq_direction_cmd_t>,
    pub hardware_analog_comparator_enable_cmd:
        __BindgenUnionField<ble_msg_hardware_analog_comparator_enable_cmd_t>,
    pub hardware_analog_comparator_config_irq_cmd:
        __BindgenUnionField<ble_msg_hardware_analog_comparator_config_irq_cmd_t>,
    pub hardware_set_rxgain_cmd: __BindgenUnionField<ble_msg_hardware_set_rxgain_cmd_t>,
    pub hardware_usb_enable_cmd: __BindgenUnionField<ble_msg_hardware_usb_enable_cmd_t>,
    pub hardware_sleep_enable_cmd: __BindgenUnionField<ble_msg_hardware_sleep_enable_cmd_t>,
    pub hardware_io_port_status_evt: __BindgenUnionField<ble_msg_hardware_io_port_status_evt_t>,
    pub hardware_soft_timer_evt: __BindgenUnionField<ble_msg_hardware_soft_timer_evt_t>,
    pub hardware_adc_result_evt: __BindgenUnionField<ble_msg_hardware_adc_result_evt_t>,
    pub hardware_analog_comparator_status_evt:
        __BindgenUnionField<ble_msg_hardware_analog_comparator_status_evt_t>,
    pub hardware_io_port_config_irq_rsp:
        __BindgenUnionField<ble_msg_hardware_io_port_config_irq_rsp_t>,
    pub hardware_set_soft_timer_rsp: __BindgenUnionField<ble_msg_hardware_set_soft_timer_rsp_t>,
    pub hardware_adc_read_rsp: __BindgenUnionField<ble_msg_hardware_adc_read_rsp_t>,
    pub hardware_io_port_config_direction_rsp:
        __BindgenUnionField<ble_msg_hardware_io_port_config_direction_rsp_t>,
    pub hardware_io_port_config_function_rsp:
        __BindgenUnionField<ble_msg_hardware_io_port_config_function_rsp_t>,
    pub hardware_io_port_config_pull_rsp:
        __BindgenUnionField<ble_msg_hardware_io_port_config_pull_rsp_t>,
    pub hardware_io_port_write_rsp: __BindgenUnionField<ble_msg_hardware_io_port_write_rsp_t>,
    pub hardware_io_port_read_rsp: __BindgenUnionField<ble_msg_hardware_io_port_read_rsp_t>,
    pub hardware_spi_config_rsp: __BindgenUnionField<ble_msg_hardware_spi_config_rsp_t>,
    pub hardware_spi_transfer_rsp: __BindgenUnionField<ble_msg_hardware_spi_transfer_rsp_t>,
    pub hardware_i2c_read_rsp: __BindgenUnionField<ble_msg_hardware_i2c_read_rsp_t>,
    pub hardware_i2c_write_rsp: __BindgenUnionField<ble_msg_hardware_i2c_write_rsp_t>,
    pub hardware_timer_comparator_rsp: __BindgenUnionField<ble_msg_hardware_timer_comparator_rsp_t>,
    pub hardware_io_port_irq_enable_rsp:
        __BindgenUnionField<ble_msg_hardware_io_port_irq_enable_rsp_t>,
    pub hardware_io_port_irq_direction_rsp:
        __BindgenUnionField<ble_msg_hardware_io_port_irq_direction_rsp_t>,
    pub hardware_analog_comparator_read_rsp:
        __BindgenUnionField<ble_msg_hardware_analog_comparator_read_rsp_t>,
    pub hardware_analog_comparator_config_irq_rsp:
        __BindgenUnionField<ble_msg_hardware_analog_comparator_config_irq_rsp_t>,
    pub hardware_usb_enable_rsp: __BindgenUnionField<ble_msg_hardware_usb_enable_rsp_t>,
    pub hardware_sleep_enable_rsp: __BindgenUnionField<ble_msg_hardware_sleep_enable_rsp_t>,
    pub hardware_get_timestamp_rsp: __BindgenUnionField<ble_msg_hardware_get_timestamp_rsp_t>,
    pub test_phy_tx_cmd: __BindgenUnionField<ble_msg_test_phy_tx_cmd_t>,
    pub test_phy_rx_cmd: __BindgenUnionField<ble_msg_test_phy_rx_cmd_t>,
    pub test_debug_cmd: __BindgenUnionField<ble_msg_test_debug_cmd_t>,
    pub test_channel_mode_cmd: __BindgenUnionField<ble_msg_test_channel_mode_cmd_t>,
    pub test_phy_end_rsp: __BindgenUnionField<ble_msg_test_phy_end_rsp_t>,
    pub test_get_channel_map_rsp: __BindgenUnionField<ble_msg_test_get_channel_map_rsp_t>,
    pub test_debug_rsp: __BindgenUnionField<ble_msg_test_debug_rsp_t>,
    pub dfu_reset_cmd: __BindgenUnionField<ble_msg_dfu_reset_cmd_t>,
    pub dfu_flash_set_address_cmd: __BindgenUnionField<ble_msg_dfu_flash_set_address_cmd_t>,
    pub dfu_flash_upload_cmd: __BindgenUnionField<ble_msg_dfu_flash_upload_cmd_t>,
    pub dfu_delay_reset_cmd: __BindgenUnionField<ble_msg_dfu_delay_reset_cmd_t>,
    pub dfu_boot_evt: __BindgenUnionField<ble_msg_dfu_boot_evt_t>,
    pub dfu_flash_set_address_rsp: __BindgenUnionField<ble_msg_dfu_flash_set_address_rsp_t>,
    pub dfu_flash_upload_rsp: __BindgenUnionField<ble_msg_dfu_flash_upload_rsp_t>,
    pub dfu_flash_upload_finish_rsp: __BindgenUnionField<ble_msg_dfu_flash_upload_finish_rsp_t>,
    pub dfu_get_bootloader_crc_rsp: __BindgenUnionField<ble_msg_dfu_get_bootloader_crc_rsp_t>,
    pub payload: __BindgenUnionField<[uint8; 256usize]>,
    pub bindgen_union_field: [u8; 256usize],
}
#[test]
fn bindgen_test_layout_ble_cmd_packet__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ble_cmd_packet__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_cmd_packet__bindgen_ty_1>(),
        256usize,
        concat!("Size of: ", stringify!(ble_cmd_packet__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_cmd_packet__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_cmd_packet__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_reset_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_reset_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_reg_write_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_reg_write_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_reg_read_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_reg_read_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_read_memory_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_read_memory_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_endpoint_tx_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_endpoint_tx_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_whitelist_append_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_whitelist_append_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_whitelist_remove_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_whitelist_remove_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_endpoint_rx_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_endpoint_rx_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_endpoint_set_watermarks_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_endpoint_set_watermarks_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_aes_setkey_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_aes_setkey_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_aes_encrypt_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_aes_encrypt_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_aes_decrypt_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_aes_decrypt_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_delay_reset_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_delay_reset_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_boot_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_boot_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_debug_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_debug_evt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_endpoint_watermark_rx_evt) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_endpoint_watermark_rx_evt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_endpoint_watermark_tx_evt) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_endpoint_watermark_tx_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_script_failure_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_script_failure_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_protocol_error_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_protocol_error_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_usb_enumerated_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_usb_enumerated_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_address_get_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_address_get_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_reg_write_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_reg_write_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_reg_read_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_reg_read_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_get_counters_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_get_counters_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_get_connections_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_get_connections_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_read_memory_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_read_memory_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_get_info_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_get_info_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_endpoint_tx_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_endpoint_tx_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_whitelist_append_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_whitelist_append_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_whitelist_remove_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_whitelist_remove_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_endpoint_rx_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_endpoint_rx_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_endpoint_set_watermarks_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_endpoint_set_watermarks_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_aes_encrypt_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_aes_encrypt_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_aes_decrypt_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_aes_decrypt_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_usb_enumeration_status_get_rsp) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_usb_enumeration_status_get_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).system_get_bootloader_crc_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(system_get_bootloader_crc_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_ps_save_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(flash_ps_save_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_ps_load_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(flash_ps_load_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_ps_erase_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(flash_ps_erase_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_erase_page_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(flash_erase_page_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_write_data_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(flash_write_data_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_read_data_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(flash_read_data_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_ps_key_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(flash_ps_key_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_ps_save_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(flash_ps_save_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_ps_load_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(flash_ps_load_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_erase_page_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(flash_erase_page_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_write_data_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(flash_write_data_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_read_data_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(flash_read_data_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes_write_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attributes_write_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes_read_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attributes_read_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes_read_type_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attributes_read_type_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attributes_user_read_response_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attributes_user_read_response_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attributes_user_write_response_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attributes_user_write_response_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes_send_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attributes_send_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes_value_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attributes_value_evt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attributes_user_read_request_evt) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attributes_user_read_request_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes_status_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attributes_status_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes_write_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attributes_write_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes_read_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attributes_read_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes_read_type_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attributes_read_type_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes_send_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attributes_send_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_disconnect_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_disconnect_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_get_rssi_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_get_rssi_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_update_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_update_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).connection_version_update_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_version_update_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).connection_channel_map_get_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_channel_map_get_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).connection_channel_map_set_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_channel_map_set_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_features_get_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_features_get_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_get_status_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_get_status_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_raw_tx_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_raw_tx_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).connection_slave_latency_disable_cmd) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_slave_latency_disable_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_status_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_status_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_version_ind_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_version_ind_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_feature_ind_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_feature_ind_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_raw_rx_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_raw_rx_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_disconnected_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_disconnected_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_disconnect_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_disconnect_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_get_rssi_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_get_rssi_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_update_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_update_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).connection_version_update_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_version_update_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).connection_channel_map_get_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_channel_map_get_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).connection_channel_map_set_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_channel_map_set_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_features_get_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_features_get_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_get_status_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_get_status_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_raw_tx_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_raw_tx_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).connection_slave_latency_disable_rsp) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(connection_slave_latency_disable_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_find_by_type_value_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_find_by_type_value_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_read_by_group_type_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_read_by_group_type_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_read_by_type_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_read_by_type_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_find_information_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_find_information_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_read_by_handle_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_read_by_handle_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_attribute_write_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_attribute_write_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_write_command_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_write_command_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_indicate_confirm_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_indicate_confirm_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_read_long_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_read_long_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_prepare_write_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_prepare_write_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_execute_write_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_execute_write_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_read_multiple_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_read_multiple_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_indicated_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_indicated_evt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_procedure_completed_evt) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_procedure_completed_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_group_found_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_group_found_evt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_attribute_found_evt) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_attribute_found_evt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_find_information_found_evt) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_find_information_found_evt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_attribute_value_evt) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_attribute_value_evt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_read_multiple_response_evt) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_read_multiple_response_evt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_find_by_type_value_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_find_by_type_value_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_read_by_group_type_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_read_by_group_type_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_read_by_type_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_read_by_type_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_find_information_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_find_information_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_read_by_handle_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_read_by_handle_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_attribute_write_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_attribute_write_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_write_command_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_write_command_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attclient_indicate_confirm_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_indicate_confirm_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_read_long_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_read_long_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_prepare_write_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_prepare_write_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_execute_write_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_execute_write_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attclient_read_multiple_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(attclient_read_multiple_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_encrypt_start_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_encrypt_start_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_set_bondable_mode_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_set_bondable_mode_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_delete_bonding_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_delete_bonding_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_set_parameters_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_set_parameters_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_passkey_entry_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_passkey_entry_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_set_oob_data_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_set_oob_data_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sm_set_pairing_distribution_keys_cmd) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_set_pairing_distribution_keys_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_smp_data_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_smp_data_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_bonding_fail_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_bonding_fail_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_passkey_display_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_passkey_display_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_passkey_request_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_passkey_request_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_bond_status_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_bond_status_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_encrypt_start_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_encrypt_start_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_delete_bonding_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_delete_bonding_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_passkey_entry_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_passkey_entry_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_get_bonds_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_get_bonds_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_whitelist_bonds_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_whitelist_bonds_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sm_set_pairing_distribution_keys_rsp) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(sm_set_pairing_distribution_keys_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_set_privacy_flags_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_privacy_flags_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_set_mode_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_mode_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_discover_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_discover_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_connect_direct_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_connect_direct_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_connect_selective_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_connect_selective_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_set_filtering_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_filtering_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_set_scan_parameters_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_scan_parameters_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_set_adv_parameters_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_adv_parameters_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_set_adv_data_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_adv_data_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gap_set_directed_connectable_mode_cmd) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_directed_connectable_mode_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gap_set_initiating_con_parameters_cmd) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_initiating_con_parameters_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gap_set_nonresolvable_address_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_nonresolvable_address_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_scan_response_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_scan_response_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_mode_changed_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_mode_changed_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_set_mode_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_mode_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_discover_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_discover_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_connect_direct_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_connect_direct_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_end_procedure_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_end_procedure_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_connect_selective_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_connect_selective_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_set_filtering_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_filtering_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_set_scan_parameters_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_scan_parameters_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_set_adv_parameters_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_adv_parameters_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_set_adv_data_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_adv_data_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gap_set_directed_connectable_mode_rsp) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_directed_connectable_mode_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gap_set_initiating_con_parameters_rsp) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_initiating_con_parameters_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gap_set_nonresolvable_address_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(gap_set_nonresolvable_address_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_io_port_config_irq_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_config_irq_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_set_soft_timer_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_set_soft_timer_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_adc_read_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_adc_read_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_io_port_config_direction_cmd) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_config_direction_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_io_port_config_function_cmd) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_config_function_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_io_port_config_pull_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_config_pull_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_io_port_write_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_write_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_io_port_read_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_read_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_spi_config_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_spi_config_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_spi_transfer_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_spi_transfer_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_i2c_read_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_i2c_read_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_i2c_write_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_i2c_write_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_set_txpower_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_set_txpower_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_timer_comparator_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_timer_comparator_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_io_port_irq_enable_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_irq_enable_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_io_port_irq_direction_cmd) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_irq_direction_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_analog_comparator_enable_cmd) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_analog_comparator_enable_cmd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_analog_comparator_config_irq_cmd) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_analog_comparator_config_irq_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_set_rxgain_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_set_rxgain_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_usb_enable_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_usb_enable_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_sleep_enable_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_sleep_enable_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_io_port_status_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_status_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_soft_timer_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_soft_timer_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_adc_result_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_adc_result_evt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_analog_comparator_status_evt) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_analog_comparator_status_evt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_io_port_config_irq_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_config_irq_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_set_soft_timer_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_set_soft_timer_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_adc_read_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_adc_read_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_io_port_config_direction_rsp) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_config_direction_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_io_port_config_function_rsp) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_config_function_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_io_port_config_pull_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_config_pull_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_io_port_write_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_write_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_io_port_read_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_read_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_spi_config_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_spi_config_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_spi_transfer_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_spi_transfer_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_i2c_read_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_i2c_read_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_i2c_write_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_i2c_write_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_timer_comparator_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_timer_comparator_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_io_port_irq_enable_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_irq_enable_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_io_port_irq_direction_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_io_port_irq_direction_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_analog_comparator_read_rsp) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_analog_comparator_read_rsp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hardware_analog_comparator_config_irq_rsp) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_analog_comparator_config_irq_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_usb_enable_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_usb_enable_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_sleep_enable_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_sleep_enable_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_get_timestamp_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(hardware_get_timestamp_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).test_phy_tx_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(test_phy_tx_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).test_phy_rx_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(test_phy_rx_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).test_debug_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(test_debug_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).test_channel_mode_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(test_channel_mode_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).test_phy_end_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(test_phy_end_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).test_get_channel_map_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(test_get_channel_map_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).test_debug_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(test_debug_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfu_reset_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(dfu_reset_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfu_flash_set_address_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(dfu_flash_set_address_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfu_flash_upload_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(dfu_flash_upload_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfu_delay_reset_cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(dfu_delay_reset_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfu_boot_evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(dfu_boot_evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfu_flash_set_address_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(dfu_flash_set_address_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfu_flash_upload_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(dfu_flash_upload_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfu_flash_upload_finish_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(dfu_flash_upload_finish_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfu_get_bootloader_crc_rsp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(dfu_get_bootloader_crc_rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet__bindgen_ty_1),
            "::",
            stringify!(payload)
        )
    );
}
#[test]
fn bindgen_test_layout_ble_cmd_packet() {
    const UNINIT: ::std::mem::MaybeUninit<ble_cmd_packet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_cmd_packet>(),
        260usize,
        concat!("Size of: ", stringify!(ble_cmd_packet))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_cmd_packet>(),
        4usize,
        concat!("Alignment of ", stringify!(ble_cmd_packet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cmd_packet),
            "::",
            stringify!(header)
        )
    );
}
extern "C" {
    #[doc = "Reset device"]
    pub fn ble_rsp_system_reset(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Hello - command for testing"]
    pub fn ble_rsp_system_hello(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Get device bluetooth address"]
    pub fn ble_rsp_system_address_get(msg: *const ble_msg_system_address_get_rsp_t);
}
extern "C" {
    #[doc = "write register"]
    pub fn ble_rsp_system_reg_write(msg: *const ble_msg_system_reg_write_rsp_t);
}
extern "C" {
    #[doc = "read register"]
    pub fn ble_rsp_system_reg_read(msg: *const ble_msg_system_reg_read_rsp_t);
}
extern "C" {
    #[doc = "get and reset packet counters"]
    pub fn ble_rsp_system_get_counters(msg: *const ble_msg_system_get_counters_rsp_t);
}
extern "C" {
    #[doc = "Get status from all connections"]
    pub fn ble_rsp_system_get_connections(msg: *const ble_msg_system_get_connections_rsp_t);
}
extern "C" {
    #[doc = "Read Memory"]
    pub fn ble_rsp_system_read_memory(msg: *const ble_msg_system_read_memory_rsp_t);
}
extern "C" {
    #[doc = "Get Device info"]
    pub fn ble_rsp_system_get_info(msg: *const ble_msg_system_get_info_rsp_t);
}
extern "C" {
    #[doc = "Send data to endpoint, error is returned if endpoint does not have enough space"]
    pub fn ble_rsp_system_endpoint_tx(msg: *const ble_msg_system_endpoint_tx_rsp_t);
}
extern "C" {
    #[doc = "Add entry to whitelist"]
    pub fn ble_rsp_system_whitelist_append(msg: *const ble_msg_system_whitelist_append_rsp_t);
}
extern "C" {
    #[doc = "Remove entry from whitelist"]
    pub fn ble_rsp_system_whitelist_remove(msg: *const ble_msg_system_whitelist_remove_rsp_t);
}
extern "C" {
    #[doc = "Add entry to whitelist"]
    pub fn ble_rsp_system_whitelist_clear(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Read data from endpoint, error is returned if endpoint does not have enough data."]
    pub fn ble_rsp_system_endpoint_rx(msg: *const ble_msg_system_endpoint_rx_rsp_t);
}
extern "C" {
    #[doc = "Set watermarks on both input and output side"]
    pub fn ble_rsp_system_endpoint_set_watermarks(
        msg: *const ble_msg_system_endpoint_set_watermarks_rsp_t,
    );
}
extern "C" {
    #[doc = "Set encryption key that will be used with aes_encrypt and aes_decrypt commands."]
    pub fn ble_rsp_system_aes_setkey(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Encrypt one block of data"]
    pub fn ble_rsp_system_aes_encrypt(msg: *const ble_msg_system_aes_encrypt_rsp_t);
}
extern "C" {
    #[doc = "Decrypt one block of data"]
    pub fn ble_rsp_system_aes_decrypt(msg: *const ble_msg_system_aes_decrypt_rsp_t);
}
extern "C" {
    #[doc = "Get the USB enumeration status"]
    pub fn ble_rsp_system_usb_enumeration_status_get(
        msg: *const ble_msg_system_usb_enumeration_status_get_rsp_t,
    );
}
extern "C" {
    #[doc = "Return bootloader crc"]
    pub fn ble_rsp_system_get_bootloader_crc(msg: *const ble_msg_system_get_bootloader_crc_rsp_t);
}
extern "C" {
    #[doc = "Delay and reset system"]
    pub fn ble_rsp_system_delay_reset(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Defragment persistent store"]
    pub fn ble_rsp_flash_ps_defrag(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Dump all ps keys"]
    pub fn ble_rsp_flash_ps_dump(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "erase all ps keys"]
    pub fn ble_rsp_flash_ps_erase_all(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "save ps key"]
    pub fn ble_rsp_flash_ps_save(msg: *const ble_msg_flash_ps_save_rsp_t);
}
extern "C" {
    #[doc = "load ps key"]
    pub fn ble_rsp_flash_ps_load(msg: *const ble_msg_flash_ps_load_rsp_t);
}
extern "C" {
    #[doc = "erase ps key"]
    pub fn ble_rsp_flash_ps_erase(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "erase flash page"]
    pub fn ble_rsp_flash_erase_page(msg: *const ble_msg_flash_erase_page_rsp_t);
}
extern "C" {
    #[doc = "write data to user data area"]
    pub fn ble_rsp_flash_write_data(msg: *const ble_msg_flash_write_data_rsp_t);
}
extern "C" {
    #[doc = "read data from user data area."]
    pub fn ble_rsp_flash_read_data(msg: *const ble_msg_flash_read_data_rsp_t);
}
extern "C" {
    #[doc = "Write to attribute database"]
    pub fn ble_rsp_attributes_write(msg: *const ble_msg_attributes_write_rsp_t);
}
extern "C" {
    #[doc = "Read from attribute database"]
    pub fn ble_rsp_attributes_read(msg: *const ble_msg_attributes_read_rsp_t);
}
extern "C" {
    #[doc = "Read attribute type from database"]
    pub fn ble_rsp_attributes_read_type(msg: *const ble_msg_attributes_read_type_rsp_t);
}
extern "C" {
    #[doc = "Respond to user attribute read request"]
    pub fn ble_rsp_attributes_user_read_response(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Response to attribute_changed event where reason is user-attribute write."]
    pub fn ble_rsp_attributes_user_write_response(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Send notification or indication to remote device."]
    pub fn ble_rsp_attributes_send(msg: *const ble_msg_attributes_send_rsp_t);
}
extern "C" {
    #[doc = "Disconnect connection, starts a disconnection procedure on connection"]
    pub fn ble_rsp_connection_disconnect(msg: *const ble_msg_connection_disconnect_rsp_t);
}
extern "C" {
    #[doc = "Get Link RSSI"]
    pub fn ble_rsp_connection_get_rssi(msg: *const ble_msg_connection_get_rssi_rsp_t);
}
extern "C" {
    #[doc = "Update connection parameters"]
    pub fn ble_rsp_connection_update(msg: *const ble_msg_connection_update_rsp_t);
}
extern "C" {
    #[doc = "Request version exchange"]
    pub fn ble_rsp_connection_version_update(msg: *const ble_msg_connection_version_update_rsp_t);
}
extern "C" {
    #[doc = "Get Current channel map"]
    pub fn ble_rsp_connection_channel_map_get(msg: *const ble_msg_connection_channel_map_get_rsp_t);
}
extern "C" {
    #[doc = "Set Channel map"]
    pub fn ble_rsp_connection_channel_map_set(msg: *const ble_msg_connection_channel_map_set_rsp_t);
}
extern "C" {
    #[doc = "Remote feature request"]
    pub fn ble_rsp_connection_features_get(msg: *const ble_msg_connection_features_get_rsp_t);
}
extern "C" {
    #[doc = "Get Connection Status Parameters"]
    pub fn ble_rsp_connection_get_status(msg: *const ble_msg_connection_get_status_rsp_t);
}
extern "C" {
    #[doc = "Raw TX"]
    pub fn ble_rsp_connection_raw_tx(msg: *const ble_msg_connection_raw_tx_rsp_t);
}
extern "C" {
    #[doc = "Disable or enable slave latency"]
    pub fn ble_rsp_connection_slave_latency_disable(
        msg: *const ble_msg_connection_slave_latency_disable_rsp_t,
    );
}
extern "C" {
    #[doc = "Discover attributes by type and value"]
    pub fn ble_rsp_attclient_find_by_type_value(
        msg: *const ble_msg_attclient_find_by_type_value_rsp_t,
    );
}
extern "C" {
    #[doc = "Discover attributes by type and value"]
    pub fn ble_rsp_attclient_read_by_group_type(
        msg: *const ble_msg_attclient_read_by_group_type_rsp_t,
    );
}
extern "C" {
    #[doc = "Read all attributes where type matches"]
    pub fn ble_rsp_attclient_read_by_type(msg: *const ble_msg_attclient_read_by_type_rsp_t);
}
extern "C" {
    #[doc = "Discover Attribute handle and type mappings"]
    pub fn ble_rsp_attclient_find_information(msg: *const ble_msg_attclient_find_information_rsp_t);
}
extern "C" {
    #[doc = "Read Characteristic value using handle"]
    pub fn ble_rsp_attclient_read_by_handle(msg: *const ble_msg_attclient_read_by_handle_rsp_t);
}
extern "C" {
    #[doc = "write data to attribute"]
    pub fn ble_rsp_attclient_attribute_write(msg: *const ble_msg_attclient_attribute_write_rsp_t);
}
extern "C" {
    #[doc = "write data to attribute using ATT write command"]
    pub fn ble_rsp_attclient_write_command(msg: *const ble_msg_attclient_write_command_rsp_t);
}
extern "C" {
    #[doc = "Send confirmation for received indication, use only if manual indications are enabled"]
    pub fn ble_rsp_attclient_indicate_confirm(msg: *const ble_msg_attclient_indicate_confirm_rsp_t);
}
extern "C" {
    #[doc = "Read Long Characteristic value"]
    pub fn ble_rsp_attclient_read_long(msg: *const ble_msg_attclient_read_long_rsp_t);
}
extern "C" {
    #[doc = "Send prepare write request to remote host"]
    pub fn ble_rsp_attclient_prepare_write(msg: *const ble_msg_attclient_prepare_write_rsp_t);
}
extern "C" {
    #[doc = "Send prepare write request to remote host"]
    pub fn ble_rsp_attclient_execute_write(msg: *const ble_msg_attclient_execute_write_rsp_t);
}
extern "C" {
    #[doc = "Read multiple attributes from server"]
    pub fn ble_rsp_attclient_read_multiple(msg: *const ble_msg_attclient_read_multiple_rsp_t);
}
extern "C" {
    #[doc = "Enable encryption on link"]
    pub fn ble_rsp_sm_encrypt_start(msg: *const ble_msg_sm_encrypt_start_rsp_t);
}
extern "C" {
    #[doc = "Set device to bondable mode"]
    pub fn ble_rsp_sm_set_bondable_mode(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "delete bonding information from ps store"]
    pub fn ble_rsp_sm_delete_bonding(msg: *const ble_msg_sm_delete_bonding_rsp_t);
}
extern "C" {
    #[doc = "set pairing requirements"]
    pub fn ble_rsp_sm_set_parameters(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Passkey entered"]
    pub fn ble_rsp_sm_passkey_entry(msg: *const ble_msg_sm_passkey_entry_rsp_t);
}
extern "C" {
    #[doc = "List all bonded devices"]
    pub fn ble_rsp_sm_get_bonds(msg: *const ble_msg_sm_get_bonds_rsp_t);
}
extern "C" {
    #[doc = "Set out-of-band encryption data for device\nDevice does not allow any other kind of pairing except oob if oob data is set."]
    pub fn ble_rsp_sm_set_oob_data(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Add all bonded devices with a known public or static address to\nthe whitelist. Previous entries in the whitelist are first\ncleared. This command can't be used while advertising, scanning\nor being connected."]
    pub fn ble_rsp_sm_whitelist_bonds(msg: *const ble_msg_sm_whitelist_bonds_rsp_t);
}
extern "C" {
    #[doc = "Change keys distribution fields in pairing request and response. By default all keys are distributed."]
    pub fn ble_rsp_sm_set_pairing_distribution_keys(
        msg: *const ble_msg_sm_set_pairing_distribution_keys_rsp_t,
    );
}
extern "C" {
    #[doc = "Set GAP central/peripheral privacy flags"]
    pub fn ble_rsp_gap_set_privacy_flags(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Set discoverable and connectable mode"]
    pub fn ble_rsp_gap_set_mode(msg: *const ble_msg_gap_set_mode_rsp_t);
}
extern "C" {
    #[doc = "start or stop discover procedure"]
    pub fn ble_rsp_gap_discover(msg: *const ble_msg_gap_discover_rsp_t);
}
extern "C" {
    #[doc = "Direct connection"]
    pub fn ble_rsp_gap_connect_direct(msg: *const ble_msg_gap_connect_direct_rsp_t);
}
extern "C" {
    #[doc = "End current GAP procedure"]
    pub fn ble_rsp_gap_end_procedure(msg: *const ble_msg_gap_end_procedure_rsp_t);
}
extern "C" {
    #[doc = "Connect to any device on whitelist"]
    pub fn ble_rsp_gap_connect_selective(msg: *const ble_msg_gap_connect_selective_rsp_t);
}
extern "C" {
    #[doc = "Set scan and advertising filtering parameters"]
    pub fn ble_rsp_gap_set_filtering(msg: *const ble_msg_gap_set_filtering_rsp_t);
}
extern "C" {
    #[doc = "Set scan parameters"]
    pub fn ble_rsp_gap_set_scan_parameters(msg: *const ble_msg_gap_set_scan_parameters_rsp_t);
}
extern "C" {
    #[doc = "Set advertising parameters"]
    pub fn ble_rsp_gap_set_adv_parameters(msg: *const ble_msg_gap_set_adv_parameters_rsp_t);
}
extern "C" {
    #[doc = "Set advertisement or scan response data. Use broadcast mode to advertise data"]
    pub fn ble_rsp_gap_set_adv_data(msg: *const ble_msg_gap_set_adv_data_rsp_t);
}
extern "C" {
    #[doc = "Sets device to Directed Connectable Mode\nUses fast advertisement procedure for 1.28s after which device enters nonconnectable mode.\nIf device has valid reconnection characteristic value, it is used for connection\notherwise passed address and address type are used"]
    pub fn ble_rsp_gap_set_directed_connectable_mode(
        msg: *const ble_msg_gap_set_directed_connectable_mode_rsp_t,
    );
}
extern "C" {
    #[doc = "Set Initiating connection scan parameters"]
    pub fn ble_rsp_gap_set_initiating_con_parameters(
        msg: *const ble_msg_gap_set_initiating_con_parameters_rsp_t,
    );
}
extern "C" {
    #[doc = "Set non-resolvable address"]
    pub fn ble_rsp_gap_set_nonresolvable_address(
        msg: *const ble_msg_gap_set_nonresolvable_address_rsp_t,
    );
}
extern "C" {
    #[doc = "Configure I/O-port interrupts"]
    pub fn ble_rsp_hardware_io_port_config_irq(
        msg: *const ble_msg_hardware_io_port_config_irq_rsp_t,
    );
}
extern "C" {
    #[doc = "Set soft timer to send events"]
    pub fn ble_rsp_hardware_set_soft_timer(msg: *const ble_msg_hardware_set_soft_timer_rsp_t);
}
extern "C" {
    #[doc = "Read A/D conversion"]
    pub fn ble_rsp_hardware_adc_read(msg: *const ble_msg_hardware_adc_read_rsp_t);
}
extern "C" {
    #[doc = "Configure I/O-port direction"]
    pub fn ble_rsp_hardware_io_port_config_direction(
        msg: *const ble_msg_hardware_io_port_config_direction_rsp_t,
    );
}
extern "C" {
    #[doc = "Configure I/O-port function"]
    pub fn ble_rsp_hardware_io_port_config_function(
        msg: *const ble_msg_hardware_io_port_config_function_rsp_t,
    );
}
extern "C" {
    #[doc = "Configure I/O-port pull-up/pull-down"]
    pub fn ble_rsp_hardware_io_port_config_pull(
        msg: *const ble_msg_hardware_io_port_config_pull_rsp_t,
    );
}
extern "C" {
    #[doc = "Write I/O-port"]
    pub fn ble_rsp_hardware_io_port_write(msg: *const ble_msg_hardware_io_port_write_rsp_t);
}
extern "C" {
    #[doc = "Read I/O-port"]
    pub fn ble_rsp_hardware_io_port_read(msg: *const ble_msg_hardware_io_port_read_rsp_t);
}
extern "C" {
    #[doc = "Configure SPI"]
    pub fn ble_rsp_hardware_spi_config(msg: *const ble_msg_hardware_spi_config_rsp_t);
}
extern "C" {
    #[doc = "Transfer SPI data"]
    pub fn ble_rsp_hardware_spi_transfer(msg: *const ble_msg_hardware_spi_transfer_rsp_t);
}
extern "C" {
    #[doc = "Read data from I2C bus using bit-bang in cc2540. I2C clk is in P1.7 data in P1.6. Pull-up must be enabled on pins"]
    pub fn ble_rsp_hardware_i2c_read(msg: *const ble_msg_hardware_i2c_read_rsp_t);
}
extern "C" {
    #[doc = "Write data to I2C bus using bit-bang in cc2540. I2C clk is in P1.7 data in P1.6. Pull-up must be enabled on pins"]
    pub fn ble_rsp_hardware_i2c_write(msg: *const ble_msg_hardware_i2c_write_rsp_t);
}
extern "C" {
    #[doc = "Set TX Power"]
    pub fn ble_rsp_hardware_set_txpower(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Set comparator for timer channel"]
    pub fn ble_rsp_hardware_timer_comparator(msg: *const ble_msg_hardware_timer_comparator_rsp_t);
}
extern "C" {
    #[doc = "Enable I/O-port interrupts"]
    pub fn ble_rsp_hardware_io_port_irq_enable(
        msg: *const ble_msg_hardware_io_port_irq_enable_rsp_t,
    );
}
extern "C" {
    #[doc = "Set I/O-port interrupt direction"]
    pub fn ble_rsp_hardware_io_port_irq_direction(
        msg: *const ble_msg_hardware_io_port_irq_direction_rsp_t,
    );
}
extern "C" {
    #[doc = "Enable or disable analog comparator"]
    pub fn ble_rsp_hardware_analog_comparator_enable(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Read analog comparator output"]
    pub fn ble_rsp_hardware_analog_comparator_read(
        msg: *const ble_msg_hardware_analog_comparator_read_rsp_t,
    );
}
extern "C" {
    #[doc = "Configure analog comparator interrupt"]
    pub fn ble_rsp_hardware_analog_comparator_config_irq(
        msg: *const ble_msg_hardware_analog_comparator_config_irq_rsp_t,
    );
}
extern "C" {
    #[doc = "Set RX Sensitivity"]
    pub fn ble_rsp_hardware_set_rxgain(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Enable or disable USB"]
    pub fn ble_rsp_hardware_usb_enable(msg: *const ble_msg_hardware_usb_enable_rsp_t);
}
extern "C" {
    #[doc = "Enable or disable sleep mode"]
    pub fn ble_rsp_hardware_sleep_enable(msg: *const ble_msg_hardware_sleep_enable_rsp_t);
}
extern "C" {
    #[doc = "Get current value of sleep timer (timestamp)"]
    pub fn ble_rsp_hardware_get_timestamp(msg: *const ble_msg_hardware_get_timestamp_rsp_t);
}
extern "C" {
    #[doc = "Start packet transmission, send one packet at every 625us"]
    pub fn ble_rsp_test_phy_tx(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Start receive test"]
    pub fn ble_rsp_test_phy_rx(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "End test, and report received packets"]
    pub fn ble_rsp_test_phy_end(msg: *const ble_msg_test_phy_end_rsp_t);
}
extern "C" {
    #[doc = "Reset test"]
    pub fn ble_rsp_test_phy_reset(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Get current channel quality map"]
    pub fn ble_rsp_test_get_channel_map(msg: *const ble_msg_test_get_channel_map_rsp_t);
}
extern "C" {
    #[doc = "Debug command"]
    pub fn ble_rsp_test_debug(msg: *const ble_msg_test_debug_rsp_t);
}
extern "C" {
    #[doc = "Set channel quality measurement mode"]
    pub fn ble_rsp_test_channel_mode(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Reset system"]
    pub fn ble_rsp_dfu_reset(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "set address for flashing"]
    pub fn ble_rsp_dfu_flash_set_address(msg: *const ble_msg_dfu_flash_set_address_rsp_t);
}
extern "C" {
    #[doc = "Upload binary for flashing. Address will be updated automatically."]
    pub fn ble_rsp_dfu_flash_upload(msg: *const ble_msg_dfu_flash_upload_rsp_t);
}
extern "C" {
    #[doc = "Uploading is finished."]
    pub fn ble_rsp_dfu_flash_upload_finish(msg: *const ble_msg_dfu_flash_upload_finish_rsp_t);
}
extern "C" {
    #[doc = "Return bootloader crc, works the same as ble_cmd_system_get_bootloader_crc, doesn't work in dfu boot mode"]
    pub fn ble_rsp_dfu_get_bootloader_crc(msg: *const ble_msg_dfu_get_bootloader_crc_rsp_t);
}
extern "C" {
    #[doc = "Delay and reset system, works the same as ble_cmd_system_delay_reset, doesn't work in dfu boot mode"]
    pub fn ble_rsp_dfu_delay_reset(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Device booted up, and is ready to receive commands"]
    pub fn ble_evt_system_boot(msg: *const ble_msg_system_boot_evt_t);
}
extern "C" {
    #[doc = "Debug data output"]
    pub fn ble_evt_system_debug(msg: *const ble_msg_system_debug_evt_t);
}
extern "C" {
    #[doc = "Endpoint receive size crossed watermark"]
    pub fn ble_evt_system_endpoint_watermark_rx(
        msg: *const ble_msg_system_endpoint_watermark_rx_evt_t,
    );
}
extern "C" {
    #[doc = "Endpoint transmit size crossed watermark"]
    pub fn ble_evt_system_endpoint_watermark_tx(
        msg: *const ble_msg_system_endpoint_watermark_tx_evt_t,
    );
}
extern "C" {
    #[doc = "Script failure detected"]
    pub fn ble_evt_system_script_failure(msg: *const ble_msg_system_script_failure_evt_t);
}
extern "C" {
    #[doc = "No valid license key found"]
    pub fn ble_evt_system_no_license_key(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Protocol error in command parser"]
    pub fn ble_evt_system_protocol_error(msg: *const ble_msg_system_protocol_error_evt_t);
}
extern "C" {
    #[doc = "USB enumeration indication"]
    pub fn ble_evt_system_usb_enumerated(msg: *const ble_msg_system_usb_enumerated_evt_t);
}
extern "C" {
    #[doc = "Dump key result"]
    pub fn ble_evt_flash_ps_key(msg: *const ble_msg_flash_ps_key_evt_t);
}
extern "C" {
    #[doc = "Attribute value has changed"]
    pub fn ble_evt_attributes_value(msg: *const ble_msg_attributes_value_evt_t);
}
extern "C" {
    #[doc = "User-backed attribute data requested"]
    pub fn ble_evt_attributes_user_read_request(
        msg: *const ble_msg_attributes_user_read_request_evt_t,
    );
}
extern "C" {
    #[doc = "attribute status flags has changed"]
    pub fn ble_evt_attributes_status(msg: *const ble_msg_attributes_status_evt_t);
}
extern "C" {
    #[doc = "Connection opened"]
    pub fn ble_evt_connection_status(msg: *const ble_msg_connection_status_evt_t);
}
extern "C" {
    #[doc = "Remote version information"]
    pub fn ble_evt_connection_version_ind(msg: *const ble_msg_connection_version_ind_evt_t);
}
extern "C" {
    #[doc = "Remote feature information"]
    pub fn ble_evt_connection_feature_ind(msg: *const ble_msg_connection_feature_ind_evt_t);
}
extern "C" {
    #[doc = "Raw RX"]
    pub fn ble_evt_connection_raw_rx(msg: *const ble_msg_connection_raw_rx_evt_t);
}
extern "C" {
    #[doc = "Link Disconnected"]
    pub fn ble_evt_connection_disconnected(msg: *const ble_msg_connection_disconnected_evt_t);
}
extern "C" {
    #[doc = "Attribute indication has been acknowledged"]
    pub fn ble_evt_attclient_indicated(msg: *const ble_msg_attclient_indicated_evt_t);
}
extern "C" {
    #[doc = "GATT procedure completed"]
    pub fn ble_evt_attclient_procedure_completed(
        msg: *const ble_msg_attclient_procedure_completed_evt_t,
    );
}
extern "C" {
    #[doc = "group discovery return"]
    pub fn ble_evt_attclient_group_found(msg: *const ble_msg_attclient_group_found_evt_t);
}
extern "C" {
    #[doc = "characteristics found"]
    pub fn ble_evt_attclient_attribute_found(msg: *const ble_msg_attclient_attribute_found_evt_t);
}
extern "C" {
    #[doc = "Handle type mapping found"]
    pub fn ble_evt_attclient_find_information_found(
        msg: *const ble_msg_attclient_find_information_found_evt_t,
    );
}
extern "C" {
    #[doc = "attribute value returned"]
    pub fn ble_evt_attclient_attribute_value(msg: *const ble_msg_attclient_attribute_value_evt_t);
}
extern "C" {
    #[doc = "Response to read multiple request"]
    pub fn ble_evt_attclient_read_multiple_response(
        msg: *const ble_msg_attclient_read_multiple_response_evt_t,
    );
}
extern "C" {
    #[doc = "SMP data output"]
    pub fn ble_evt_sm_smp_data(msg: *const ble_msg_sm_smp_data_evt_t);
}
extern "C" {
    #[doc = "Link bonding has failed"]
    pub fn ble_evt_sm_bonding_fail(msg: *const ble_msg_sm_bonding_fail_evt_t);
}
extern "C" {
    #[doc = "Passkey to be entered to remote device"]
    pub fn ble_evt_sm_passkey_display(msg: *const ble_msg_sm_passkey_display_evt_t);
}
extern "C" {
    #[doc = "Passkey Requested"]
    pub fn ble_evt_sm_passkey_request(msg: *const ble_msg_sm_passkey_request_evt_t);
}
extern "C" {
    #[doc = "Bond status information"]
    pub fn ble_evt_sm_bond_status(msg: *const ble_msg_sm_bond_status_evt_t);
}
extern "C" {
    #[doc = "Scan Response"]
    pub fn ble_evt_gap_scan_response(msg: *const ble_msg_gap_scan_response_evt_t);
}
extern "C" {
    #[doc = "Not used"]
    pub fn ble_evt_gap_mode_changed(msg: *const ble_msg_gap_mode_changed_evt_t);
}
extern "C" {
    #[doc = "I/O-port state"]
    pub fn ble_evt_hardware_io_port_status(msg: *const ble_msg_hardware_io_port_status_evt_t);
}
extern "C" {
    #[doc = "soft timer event"]
    pub fn ble_evt_hardware_soft_timer(msg: *const ble_msg_hardware_soft_timer_evt_t);
}
extern "C" {
    #[doc = "adc result"]
    pub fn ble_evt_hardware_adc_result(msg: *const ble_msg_hardware_adc_result_evt_t);
}
extern "C" {
    #[doc = "This event is produced when analog comparator output changes"]
    pub fn ble_evt_hardware_analog_comparator_status(
        msg: *const ble_msg_hardware_analog_comparator_status_evt_t,
    );
}
extern "C" {
    #[doc = "This event is produced when the radio hardware error appears"]
    pub fn ble_evt_hardware_radio_error(nul: *const ::std::os::raw::c_void);
}
extern "C" {
    #[doc = "Device booted up in dfu, and is ready to receive commands"]
    pub fn ble_evt_dfu_boot(msg: *const ble_msg_dfu_boot_evt_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_class_handler_t {
    pub msgs: *const *const ble_msg,
    pub maxhandlers: uint8,
}
#[test]
fn bindgen_test_layout_ble_class_handler_t() {
    const UNINIT: ::std::mem::MaybeUninit<ble_class_handler_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ble_class_handler_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_class_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_class_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_class_handler_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_class_handler_t),
            "::",
            stringify!(msgs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxhandlers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_class_handler_t),
            "::",
            stringify!(maxhandlers)
        )
    );
}
extern "C" {
    pub static ble_class_rsp_handlers: [ble_class_handler_t; 10usize];
}
extern "C" {
    pub static ble_class_evt_handlers: [ble_class_handler_t; 10usize];
}
extern "C" {
    pub fn ble_default(arg1: *const ::std::os::raw::c_void);
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
